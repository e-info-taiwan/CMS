// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url      = env("DATABASE_URL")
  provider = "postgresql"
}

generator client {
  provider = "prisma-client-js"
  output   = "node_modules/.prisma/client"
}

model Post {
  id                          Int            @id @default(autoincrement())
  name                        String         @default("")
  hidden_title                Boolean        @default(false)
  status                      String?        @default("draft")
  slug                        String         @default("")
  weight                      Int?           @default(85)
  publishDate                 DateTime       @default(now())
  heroImage                   Photo?         @relation("Post_heroImage", fields: [heroImageId], references: [id])
  heroImageId                 Int?           @map("heroImage")
  heroStyle                   String?        @default("normal")
  heroVideo                   String         @default("")
  heroCaption                 String         @default("")
  ref_authors                 Author[]       @relation("Author_ref_posts")
  reporter                    String         @default("")
  content                     Json?
  relatedPosts                Post[]         @relation("Post_relatedPosts")
  ref_events                  Event[]        @relation("Event_ref_posts")
  ref_polls                   Poll[]         @relation("Poll_ref_posts")
  group                       Group?         @relation("Post_group", fields: [groupId], references: [id])
  groupId                     Int?           @map("group")
  category                    Category?      @relation("Post_category", fields: [categoryId], references: [id])
  categoryId                  Int?           @map("category")
  classify                    Classify?      @relation("Post_classify", fields: [classifyId], references: [id])
  classifyId                  Int?           @map("classify")
  sdg                         SDG[]          @relation("Post_sdg")
  tags                        Tag[]          @relation("Post_tags")
  ogTitle                     String         @default("")
  ogImage                     Photo?         @relation("Post_ogImage", fields: [ogImageId], references: [id])
  ogImageId                   Int?           @map("ogImage")
  copyright                   String?        @default("reserved")
  type                        String?        @default("article")
  longform                    Longform?      @relation("Post_longform", fields: [longformId], references: [id])
  longformId                  Int?           @map("longform")
  apiData                     Json?
  createdAt                   DateTime?
  updatedAt                   DateTime?
  createdBy                   User?          @relation("Post_createdBy", fields: [createdById], references: [id])
  createdById                 Int?           @map("createdBy")
  updatedBy                   User?          @relation("Post_updatedBy", fields: [updatedById], references: [id])
  updatedById                 Int?           @map("updatedBy")
  from_Post_relatedPosts      Post[]         @relation("Post_relatedPosts")
  from_EditorChoice_post      EditorChoice[] @relation("EditorChoice_post")
  from_PromoteStory_post      PromoteStory[] @relation("PromoteStory_post")
  from_InfoGraph_relatedPosts InfoGraph[]    @relation("InfoGraph_relatedPosts")

  @@index([heroImageId])
  @@index([groupId])
  @@index([categoryId])
  @@index([classifyId])
  @@index([ogImageId])
  @@index([longformId])
  @@index([createdById])
  @@index([updatedById])
}

model Classify {
  id          Int       @id @default(autoincrement())
  name        String    @default("")
  slug        String    @unique @default("")
  category    Category? @relation("Classify_category", fields: [categoryId], references: [id])
  categoryId  Int?      @map("category")
  weight      Int?      @default(3)
  active      Boolean   @default(true)
  posts       Post[]    @relation("Post_classify")
  createdAt   DateTime?
  updatedAt   DateTime?
  createdBy   User?     @relation("Classify_createdBy", fields: [createdById], references: [id])
  createdById Int?      @map("createdBy")
  updatedBy   User?     @relation("Classify_updatedBy", fields: [updatedById], references: [id])
  updatedById Int?      @map("updatedBy")

  @@index([categoryId])
  @@index([createdById])
  @@index([updatedById])
}

model Category {
  id          Int        @id @default(autoincrement())
  name        String     @default("")
  slug        String     @unique @default("")
  weight      Int?       @default(3)
  active      Boolean    @default(true)
  group       Group?     @relation("Category_group", fields: [groupId], references: [id])
  groupId     Int?       @map("group")
  classify    Classify[] @relation("Classify_category")
  sdg         SDG[]      @relation("Category_sdg")
  posts       Post[]     @relation("Post_category")
  createdAt   DateTime?
  updatedAt   DateTime?
  createdBy   User?      @relation("Category_createdBy", fields: [createdById], references: [id])
  createdById Int?       @map("createdBy")
  updatedBy   User?      @relation("Category_updatedBy", fields: [updatedById], references: [id])
  updatedById Int?       @map("updatedBy")

  @@index([groupId])
  @@index([createdById])
  @@index([updatedById])
}

model Group {
  id          Int        @id @default(autoincrement())
  name        String     @default("")
  slug        String     @unique @default("")
  weight      Int?       @default(5)
  events      Event[]    @relation("Event_category")
  heroImage   Photo?     @relation("Group_heroImage", fields: [heroImageId], references: [id])
  heroImageId Int?       @map("heroImage")
  category    Category[] @relation("Category_group")
  active      Boolean    @default(true)
  posts       Post[]     @relation("Post_group")
  createdAt   DateTime?
  updatedAt   DateTime?
  createdBy   User?      @relation("Group_createdBy", fields: [createdById], references: [id])
  createdById Int?       @map("createdBy")
  updatedBy   User?      @relation("Group_updatedBy", fields: [updatedById], references: [id])
  updatedById Int?       @map("updatedBy")

  @@index([heroImageId])
  @@index([createdById])
  @@index([updatedById])
}

model EditorChoice {
  id          Int       @id @default(autoincrement())
  post        Post?     @relation("EditorChoice_post", fields: [postId], references: [id])
  postId      Int?      @map("post")
  weight      Int?      @default(2)
  active      Boolean   @default(true)
  createdAt   DateTime?
  updatedAt   DateTime?
  createdBy   User?     @relation("EditorChoice_createdBy", fields: [createdById], references: [id])
  createdById Int?      @map("createdBy")
  updatedBy   User?     @relation("EditorChoice_updatedBy", fields: [updatedById], references: [id])
  updatedById Int?      @map("updatedBy")

  @@index([postId])
  @@index([createdById])
  @@index([updatedById])
}

model LatestNew {
  id          Int        @id @default(autoincrement())
  name        String     @default("")
  slug        String     @default("")
  subtitle    String     @default("")
  status      String?    @default("published")
  publishTime DateTime?
  type        String?    @default("news")
  content     Json?
  download    Download[] @relation("Download_latest")
  active      Boolean    @default(true)
  apiData     Json?
  createdAt   DateTime?
  updatedAt   DateTime?
  createdBy   User?      @relation("LatestNew_createdBy", fields: [createdById], references: [id])
  createdById Int?       @map("createdBy")
  updatedBy   User?      @relation("LatestNew_updatedBy", fields: [updatedById], references: [id])
  updatedById Int?       @map("updatedBy")

  @@index([createdById])
  @@index([updatedById])
}

model Banner {
  id             Int       @id @default(autoincrement())
  mobileImage    Photo?    @relation("Banner_mobileImage", fields: [mobileImageId], references: [id])
  mobileImageId  Int?      @map("mobileImage")
  tabletImage    Photo?    @relation("Banner_tabletImage", fields: [tabletImageId], references: [id])
  tabletImageId  Int?      @map("tabletImage")
  desktopImage   Photo?    @relation("Banner_desktopImage", fields: [desktopImageId], references: [id])
  desktopImageId Int?      @map("desktopImage")
  url            String    @default("")
  page           String
  register_start DateTime
  register_end   DateTime
  createdAt      DateTime?
  updatedAt      DateTime?
  createdBy      User?     @relation("Banner_createdBy", fields: [createdById], references: [id])
  createdById    Int?      @map("createdBy")
  updatedBy      User?     @relation("Banner_updatedBy", fields: [updatedById], references: [id])
  updatedById    Int?      @map("updatedBy")

  @@index([mobileImageId])
  @@index([tabletImageId])
  @@index([desktopImageId])
  @@index([createdById])
  @@index([updatedById])
}

model Event {
  id                     Int            @id @default(autoincrement())
  name                   String         @default("")
  slug                   String         @unique @default("")
  weight                 Int?
  register_start         DateTime?
  register_end           DateTime
  event_start            DateTime?
  event_end              DateTime?
  category               Group?         @relation("Event_category", fields: [categoryId], references: [id])
  categoryId             Int?           @map("category")
  venue                  String         @default("")
  location               String         @default("")
  map_embed              String         @default("")
  content                Json?
  status                 String?
  type                   String?
  register_link          String         @default("")
  heroImage              Photo?         @relation("Event_heroImage", fields: [heroImageId], references: [id])
  heroImageId            Int?           @map("heroImage")
  ref_posts              Post[]         @relation("Event_ref_posts")
  hosted                 String         @default("")
  hosted_type            String         @default("主辦單位")
  hosted_logo            Photo[]        @relation("Event_hosted_logo")
  hosted_type2           String         @default("協辦單位")
  hosted_logo2           Photo[]        @relation("Event_hosted_logo2")
  hosted_type3           String         @default("承辦單位")
  hosted_logo3           Photo[]        @relation("Event_hosted_logo3")
  apiData                Json?
  createdAt              DateTime?
  updatedAt              DateTime?
  createdBy              User?          @relation("Event_createdBy", fields: [createdById], references: [id])
  createdById            Int?           @map("createdBy")
  updatedBy              User?          @relation("Event_updatedBy", fields: [updatedById], references: [id])
  updatedById            Int?           @map("updatedBy")
  from_PromoteEvent_post PromoteEvent[] @relation("PromoteEvent_post")

  @@index([categoryId])
  @@index([heroImageId])
  @@index([createdById])
  @@index([updatedById])
}

model PromoteStory {
  id          Int       @id @default(autoincrement())
  post        Post?     @relation("PromoteStory_post", fields: [postId], references: [id])
  postId      Int?      @map("post")
  weight      Int?      @default(2)
  active      Boolean   @default(true)
  createdAt   DateTime?
  updatedAt   DateTime?
  createdBy   User?     @relation("PromoteStory_createdBy", fields: [createdById], references: [id])
  createdById Int?      @map("createdBy")
  updatedBy   User?     @relation("PromoteStory_updatedBy", fields: [updatedById], references: [id])
  updatedById Int?      @map("updatedBy")

  @@index([postId])
  @@index([createdById])
  @@index([updatedById])
}

model PromoteEvent {
  id          Int       @id @default(autoincrement())
  post        Event?    @relation("PromoteEvent_post", fields: [postId], references: [id])
  postId      Int?      @map("post")
  weight      Int?      @default(2)
  active      Boolean   @default(true)
  createdAt   DateTime?
  updatedAt   DateTime?
  createdBy   User?     @relation("PromoteEvent_createdBy", fields: [createdById], references: [id])
  createdById Int?      @map("createdBy")
  updatedBy   User?     @relation("PromoteEvent_updatedBy", fields: [updatedById], references: [id])
  updatedById Int?      @map("updatedBy")

  @@index([postId])
  @@index([createdById])
  @@index([updatedById])
}

model Influence {
  id          Int       @id @default(autoincrement())
  name        String    @unique @default("")
  status      String?
  heroImage   Photo?    @relation("Influence_heroImage", fields: [heroImageId], references: [id])
  heroImageId Int?      @map("heroImage")
  desc        String    @default("")
  publishDate DateTime
  download    Download? @relation("Influence_download", fields: [downloadId], references: [id])
  downloadId  Int?      @map("download")
  createdAt   DateTime?
  updatedAt   DateTime?
  createdBy   User?     @relation("Influence_createdBy", fields: [createdById], references: [id])
  createdById Int?      @map("createdBy")
  updatedBy   User?     @relation("Influence_updatedBy", fields: [updatedById], references: [id])
  updatedById Int?      @map("updatedBy")

  @@index([heroImageId])
  @@index([downloadId])
  @@index([createdById])
  @@index([updatedById])
}

model AudioFile {
  id            Int       @id @default(autoincrement())
  name          String    @default("")
  file_filesize Int?
  file_mode     String?
  file_filename String?
  description   String    @default("")
  tags          String    @default("")
  meta          String    @default("")
  url           String    @default("")
  duration      String    @default("")
  createdAt     DateTime?
  updatedAt     DateTime?
  createdBy     User?     @relation("AudioFile_createdBy", fields: [createdById], references: [id])
  createdById   Int?      @map("createdBy")
  updatedBy     User?     @relation("AudioFile_updatedBy", fields: [updatedById], references: [id])
  updatedById   Int?      @map("updatedBy")

  @@index([createdById])
  @@index([updatedById])
}

model Author {
  id              Int     @id @default(autoincrement())
  name            String  @default("")
  column          String  @default("")
  email           String  @unique @default("")
  profile_photo   Photo?  @relation("Author_profile_photo", fields: [profile_photoId], references: [id])
  profile_photoId Int?    @map("profile_photo")
  intro           Json    @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  ref_posts       Post[]  @relation("Author_ref_posts")
  listing         Boolean @default(false)
  active          Boolean @default(true)

  @@index([profile_photoId])
}

model Video {
  id                 Int       @id @default(autoincrement())
  name               String    @default("")
  youtubeUrl         String    @default("")
  videoFile_filesize Int?
  videoFile_mode     String?
  videoFile_filename String?
  coverPhoto         Photo?    @relation("Video_coverPhoto", fields: [coverPhotoId], references: [id])
  coverPhotoId       Int?      @map("coverPhoto")
  description        String    @default("")
  tags               String    @default("")
  meta               String    @default("")
  url                String    @default("")
  duration           String    @default("")
  createdAt          DateTime?
  updatedAt          DateTime?
  createdBy          User?     @relation("Video_createdBy", fields: [createdById], references: [id])
  createdById        Int?      @map("createdBy")
  updatedBy          User?     @relation("Video_updatedBy", fields: [updatedById], references: [id])
  updatedById        Int?      @map("updatedBy")

  @@index([coverPhotoId])
  @@index([createdById])
  @@index([updatedById])
}

model Photo {
  id                        Int         @id @default(autoincrement())
  name                      String      @default("")
  imageFile_filesize        Int?
  imageFile_extension       String?
  imageFile_width           Int?
  imageFile_height          Int?
  imageFile_mode            String?
  imageFile_id              String?
  file_filesize             Int?
  file_mode                 String?
  file_filename             String?
  urlOriginal               String      @default("")
  createdAt                 DateTime?
  updatedAt                 DateTime?
  createdBy                 User?       @relation("Photo_createdBy", fields: [createdById], references: [id])
  createdById               Int?        @map("createdBy")
  updatedBy                 User?       @relation("Photo_updatedBy", fields: [updatedById], references: [id])
  updatedById               Int?        @map("updatedBy")
  from_Post_heroImage       Post[]      @relation("Post_heroImage")
  from_Post_ogImage         Post[]      @relation("Post_ogImage")
  from_Group_heroImage      Group[]     @relation("Group_heroImage")
  from_Banner_mobileImage   Banner[]    @relation("Banner_mobileImage")
  from_Banner_tabletImage   Banner[]    @relation("Banner_tabletImage")
  from_Banner_desktopImage  Banner[]    @relation("Banner_desktopImage")
  from_Event_heroImage      Event[]     @relation("Event_heroImage")
  from_Event_hosted_logo    Event[]     @relation("Event_hosted_logo")
  from_Event_hosted_logo2   Event[]     @relation("Event_hosted_logo2")
  from_Event_hosted_logo3   Event[]     @relation("Event_hosted_logo3")
  from_Influence_heroImage  Influence[] @relation("Influence_heroImage")
  from_Author_profile_photo Author[]    @relation("Author_profile_photo")
  from_Video_coverPhoto     Video[]     @relation("Video_coverPhoto")
  from_InfoGraph_heroImage  InfoGraph[] @relation("InfoGraph_heroImage")
  from_Poll_image           Poll[]      @relation("Poll_image")
  from_SDG_heroImage        SDG[]       @relation("SDG_heroImage")
  from_Longform_headLogo    Longform[]  @relation("Longform_headLogo")
  from_Longform_heroMob     Longform[]  @relation("Longform_heroMob")

  @@index([createdById])
  @@index([updatedById])
  @@map("Image")
}

model InfoGraph {
  id           Int       @id @default(autoincrement())
  name         String    @unique @default("")
  slug         String    @unique @default("")
  status       String?
  heroImage    Photo?    @relation("InfoGraph_heroImage", fields: [heroImageId], references: [id])
  heroImageId  Int?      @map("heroImage")
  publishDate  DateTime
  infograph    String    @default("")
  dataSource   Json      @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  content      Json?
  dataUpdated  DateTime
  relatedPosts Post[]    @relation("InfoGraph_relatedPosts")
  apiData      Json?
  isHomepage   Boolean   @default(false)
  createdAt    DateTime?
  updatedAt    DateTime?
  createdBy    User?     @relation("InfoGraph_createdBy", fields: [createdById], references: [id])
  createdById  Int?      @map("createdBy")
  updatedBy    User?     @relation("InfoGraph_updatedBy", fields: [updatedById], references: [id])
  updatedById  Int?      @map("updatedBy")

  @@index([heroImageId])
  @@index([createdById])
  @@index([updatedById])
}

model Poll {
  id          Int          @id @default(autoincrement())
  name        String       @unique @default("")
  image       Photo?       @relation("Poll_image", fields: [imageId], references: [id])
  imageId     Int?         @map("image")
  choice      String?
  type        String?
  status      String?      @default("draft")
  startTime   DateTime
  endTime     DateTime
  publishTime DateTime     @default(now())
  description String       @default("")
  options     PollOption[] @relation("Poll_options")
  result      PollResult[] @relation("PollResult_poll")
  ref_posts   Post[]       @relation("Poll_ref_posts")
  createdAt   DateTime?
  updatedAt   DateTime?
  createdBy   User?        @relation("Poll_createdBy", fields: [createdById], references: [id])
  createdById Int?         @map("createdBy")
  updatedBy   User?        @relation("Poll_updatedBy", fields: [updatedById], references: [id])
  updatedById Int?         @map("updatedBy")

  @@index([imageId])
  @@index([createdById])
  @@index([updatedById])
}

model PollOption {
  id          Int          @id @default(autoincrement())
  name        String       @unique @default("")
  order       Int?
  poll        Poll[]       @relation("Poll_options")
  result      PollResult[] @relation("PollResult_option")
  createdAt   DateTime?
  updatedAt   DateTime?
  createdBy   User?        @relation("PollOption_createdBy", fields: [createdById], references: [id])
  createdById Int?         @map("createdBy")
  updatedBy   User?        @relation("PollOption_updatedBy", fields: [updatedById], references: [id])
  updatedById Int?         @map("updatedBy")

  @@index([createdById])
  @@index([updatedById])
}

model PollResult {
  id          Int         @id @default(autoincrement())
  name        String      @unique @default("")
  poll        Poll?       @relation("PollResult_poll", fields: [pollId], references: [id])
  pollId      Int?        @map("poll")
  option      PollOption? @relation("PollResult_option", fields: [optionId], references: [id])
  optionId    Int?        @map("option")
  createdAt   DateTime?
  updatedAt   DateTime?
  createdBy   User?       @relation("PollResult_createdBy", fields: [createdById], references: [id])
  createdById Int?        @map("createdBy")
  updatedBy   User?       @relation("PollResult_updatedBy", fields: [updatedById], references: [id])
  updatedById Int?        @map("updatedBy")

  @@index([pollId])
  @@index([optionId])
  @@index([createdById])
  @@index([updatedById])
}

model Tag {
  id          Int       @id @default(autoincrement())
  name        String    @unique @default("")
  posts       Post[]    @relation("Post_tags")
  createdAt   DateTime?
  updatedAt   DateTime?
  createdBy   User?     @relation("Tag_createdBy", fields: [createdById], references: [id])
  createdById Int?      @map("createdBy")
  updatedBy   User?     @relation("Tag_updatedBy", fields: [updatedById], references: [id])
  updatedById Int?      @map("updatedBy")

  @@index([createdById])
  @@index([updatedById])
}

model SDG {
  id          Int        @id @default(autoincrement())
  name        String     @default("")
  url         String     @unique @default("")
  category    Category[] @relation("Category_sdg")
  posts       Post[]     @relation("Post_sdg")
  heroImage   Photo?     @relation("SDG_heroImage", fields: [heroImageId], references: [id])
  heroImageId Int?       @map("heroImage")
  createdAt   DateTime?
  updatedAt   DateTime?
  createdBy   User?      @relation("SDG_createdBy", fields: [createdById], references: [id])
  createdById Int?       @map("createdBy")
  updatedBy   User?      @relation("SDG_updatedBy", fields: [updatedById], references: [id])
  updatedById Int?       @map("updatedBy")

  @@index([heroImageId])
  @@index([createdById])
  @@index([updatedById])
}

model Award {
  id          Int       @id @default(autoincrement())
  year        String?
  name        String    @default("")
  report      String    @default("")
  url         String    @default("")
  createdAt   DateTime?
  updatedAt   DateTime?
  createdBy   User?     @relation("Award_createdBy", fields: [createdById], references: [id])
  createdById Int?      @map("createdBy")
  updatedBy   User?     @relation("Award_updatedBy", fields: [updatedById], references: [id])
  updatedById Int?      @map("updatedBy")

  @@index([createdById])
  @@index([updatedById])
}

model Download {
  id            Int         @id @default(autoincrement())
  name          String      @default("")
  file_filesize Int?
  file_mode     String?
  file_filename String?
  url           String      @default("")
  active        Boolean     @default(true)
  latest        LatestNew[] @relation("Download_latest")
  influence     Influence[] @relation("Influence_download")
  createdAt     DateTime?
  updatedAt     DateTime?
  createdBy     User?       @relation("Download_createdBy", fields: [createdById], references: [id])
  createdById   Int?        @map("createdBy")
  updatedBy     User?       @relation("Download_updatedBy", fields: [updatedById], references: [id])
  updatedById   Int?        @map("updatedBy")

  @@index([createdById])
  @@index([updatedById])
}

model Longform {
  id                 Int       @id @default(autoincrement())
  slug               String    @unique @default("")
  titleSize          Int?
  titleColor         String    @default("#000")
  subtitle           String    @default("")
  subtitleSize       Int?
  subtitleColor      String    @default("#000")
  headLogo           Photo?    @relation("Longform_headLogo", fields: [headLogoId], references: [id])
  headLogoId         Int?      @map("headLogo")
  heroMob            Photo?    @relation("Longform_heroMob", fields: [heroMobId], references: [id])
  heroMobId          Int?      @map("heroMob")
  author             String    @default("")
  photographer       String    @default("")
  social             String    @default("")
  designer           String    @default("")
  engineer           String    @default("")
  director           String    @default("")
  byline_title       String    @default("")
  byline_name        String    @default("")
  byline_title2      String    @default("")
  byline_name2       String    @default("")
  createdAt          DateTime?
  updatedAt          DateTime?
  createdBy          User?     @relation("Longform_createdBy", fields: [createdById], references: [id])
  createdById        Int?      @map("createdBy")
  updatedBy          User?     @relation("Longform_updatedBy", fields: [updatedById], references: [id])
  updatedById        Int?      @map("updatedBy")
  from_Post_longform Post[]    @relation("Post_longform")

  @@index([headLogoId])
  @@index([heroMobId])
  @@index([createdById])
  @@index([updatedById])
}

model User {
  id                             Int               @id @default(autoincrement())
  name                           String            @default("")
  email                          String            @unique @default("")
  password                       String
  role                           String
  isProtected                    Boolean           @default(false)
  from_Post_createdBy            Post[]            @relation("Post_createdBy")
  from_Post_updatedBy            Post[]            @relation("Post_updatedBy")
  from_Classify_createdBy        Classify[]        @relation("Classify_createdBy")
  from_Classify_updatedBy        Classify[]        @relation("Classify_updatedBy")
  from_Category_createdBy        Category[]        @relation("Category_createdBy")
  from_Category_updatedBy        Category[]        @relation("Category_updatedBy")
  from_Group_createdBy           Group[]           @relation("Group_createdBy")
  from_Group_updatedBy           Group[]           @relation("Group_updatedBy")
  from_EditorChoice_createdBy    EditorChoice[]    @relation("EditorChoice_createdBy")
  from_EditorChoice_updatedBy    EditorChoice[]    @relation("EditorChoice_updatedBy")
  from_LatestNew_createdBy       LatestNew[]       @relation("LatestNew_createdBy")
  from_LatestNew_updatedBy       LatestNew[]       @relation("LatestNew_updatedBy")
  from_Banner_createdBy          Banner[]          @relation("Banner_createdBy")
  from_Banner_updatedBy          Banner[]          @relation("Banner_updatedBy")
  from_Event_createdBy           Event[]           @relation("Event_createdBy")
  from_Event_updatedBy           Event[]           @relation("Event_updatedBy")
  from_PromoteStory_createdBy    PromoteStory[]    @relation("PromoteStory_createdBy")
  from_PromoteStory_updatedBy    PromoteStory[]    @relation("PromoteStory_updatedBy")
  from_PromoteEvent_createdBy    PromoteEvent[]    @relation("PromoteEvent_createdBy")
  from_PromoteEvent_updatedBy    PromoteEvent[]    @relation("PromoteEvent_updatedBy")
  from_Influence_createdBy       Influence[]       @relation("Influence_createdBy")
  from_Influence_updatedBy       Influence[]       @relation("Influence_updatedBy")
  from_AudioFile_createdBy       AudioFile[]       @relation("AudioFile_createdBy")
  from_AudioFile_updatedBy       AudioFile[]       @relation("AudioFile_updatedBy")
  from_Video_createdBy           Video[]           @relation("Video_createdBy")
  from_Video_updatedBy           Video[]           @relation("Video_updatedBy")
  from_Photo_createdBy           Photo[]           @relation("Photo_createdBy")
  from_Photo_updatedBy           Photo[]           @relation("Photo_updatedBy")
  from_InfoGraph_createdBy       InfoGraph[]       @relation("InfoGraph_createdBy")
  from_InfoGraph_updatedBy       InfoGraph[]       @relation("InfoGraph_updatedBy")
  from_Poll_createdBy            Poll[]            @relation("Poll_createdBy")
  from_Poll_updatedBy            Poll[]            @relation("Poll_updatedBy")
  from_PollOption_createdBy      PollOption[]      @relation("PollOption_createdBy")
  from_PollOption_updatedBy      PollOption[]      @relation("PollOption_updatedBy")
  from_PollResult_createdBy      PollResult[]      @relation("PollResult_createdBy")
  from_PollResult_updatedBy      PollResult[]      @relation("PollResult_updatedBy")
  from_Tag_createdBy             Tag[]             @relation("Tag_createdBy")
  from_Tag_updatedBy             Tag[]             @relation("Tag_updatedBy")
  from_SDG_createdBy             SDG[]             @relation("SDG_createdBy")
  from_SDG_updatedBy             SDG[]             @relation("SDG_updatedBy")
  from_Award_createdBy           Award[]           @relation("Award_createdBy")
  from_Award_updatedBy           Award[]           @relation("Award_updatedBy")
  from_Download_createdBy        Download[]        @relation("Download_createdBy")
  from_Download_updatedBy        Download[]        @relation("Download_updatedBy")
  from_Longform_createdBy        Longform[]        @relation("Longform_createdBy")
  from_Longform_updatedBy        Longform[]        @relation("Longform_updatedBy")
  from_Donation_createdBy        Donation[]        @relation("Donation_createdBy")
  from_Donation_updatedBy        Donation[]        @relation("Donation_updatedBy")
  from_NewebpayPayment_createdBy NewebpayPayment[] @relation("NewebpayPayment_createdBy")
  from_NewebpayPayment_updatedBy NewebpayPayment[] @relation("NewebpayPayment_updatedBy")
}

model Donation {
  id                     Int                       @id @default(autoincrement())
  orderNumber            String                    @unique @default("")
  type                   DonationTypeType          @default(one_time)
  paymentMethod          DonationPaymentMethodType @default(newebpay)
  newebpayPayment        NewebpayPayment[]         @relation("NewebpayPayment_donation")
  amount                 Float
  currency               DonationCurrencyType      @default(TWD)
  name                   String                    @default("")
  email                  String                    @default("")
  phone                  String                    @default("")
  address                String                    @default("")
  shouldInvoice          Boolean                   @default(false)
  paperInvoice           Boolean                   @default(false)
  donorTitle             String                    @default("")
  donorSerial            String                    @default("")
  gift                   String                    @default("")
  isCancelled            Boolean                   @default(false)
  periodType             DonationPeriodTypeType?
  periodPoint            String                    @default("")
  expectedTotalAuthTimes Int?                      @default(1)
  expectedAuthedTimes    Int?                      @default(1)
  expectedAuthDates      String                    @default("")
  cronjobCheckDate       DateTime?
  failureTimes           Int?                      @default(0)
  createdAt              DateTime?
  updatedAt              DateTime?
  createdBy              User?                     @relation("Donation_createdBy", fields: [createdById], references: [id])
  createdById            Int?                      @map("createdBy")
  updatedBy              User?                     @relation("Donation_updatedBy", fields: [updatedById], references: [id])
  updatedById            Int?                      @map("updatedBy")

  @@index([createdById])
  @@index([updatedById])
}

model NewebpayPayment {
  id               Int       @id @default(autoincrement())
  donation         Donation? @relation("NewebpayPayment_donation", fields: [donationId], references: [id])
  donationId       Int?      @map("donation")
  status           String    @default("")
  message          String    @default("")
  paymentMethod    String    @default("")
  amount           Int
  paymentTime      DateTime
  orderNumber      String    @unique @default("")
  tradeNumber      String    @default("")
  merchantId       String    @default("")
  tokenUseStatus   Int?
  respondCode      String    @default("")
  ECI              String    @default("")
  authCode         String    @default("")
  authBank         String    @default("")
  cardInfoLastFour String    @default("")
  cardInfoFirstSix String    @default("")
  cardInfoExp      String    @default("")
  totalTimes       String    @default("")
  alreadyTimes     String    @default("")
  createdAt        DateTime?
  updatedAt        DateTime?
  createdBy        User?     @relation("NewebpayPayment_createdBy", fields: [createdById], references: [id])
  createdById      Int?      @map("createdBy")
  updatedBy        User?     @relation("NewebpayPayment_updatedBy", fields: [updatedById], references: [id])
  updatedById      Int?      @map("updatedBy")

  @@index([donationId])
  @@index([createdById])
  @@index([updatedById])
}

enum DonationTypeType {
  one_time
  periodic
}

enum DonationPaymentMethodType {
  newebpay
}

enum DonationCurrencyType {
  TWD
}

enum DonationPeriodTypeType {
  D
  W
  M
  Y
}