# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Ad {
  id: ID!
  name: String
  showOnHomepage: Boolean
  image: Photo
  imageUrl: String
  state: String
  sortOrder: Int
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input AdWhereUniqueInput {
  id: ID
}

input AdWhereInput {
  AND: [AdWhereInput!]
  OR: [AdWhereInput!]
  NOT: [AdWhereInput!]
  id: IDFilter
  name: StringFilter
  showOnHomepage: BooleanFilter
  image: PhotoWhereInput
  imageUrl: StringFilter
  state: StringFilter
  sortOrder: IntFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input AdOrderByInput {
  id: OrderDirection
  name: OrderDirection
  showOnHomepage: OrderDirection
  imageUrl: OrderDirection
  state: OrderDirection
  sortOrder: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input AdUpdateInput {
  name: String
  showOnHomepage: Boolean
  image: PhotoRelateToOneForUpdateInput
  imageUrl: String
  state: String
  sortOrder: Int
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input PhotoRelateToOneForUpdateInput {
  create: PhotoCreateInput
  connect: PhotoWhereUniqueInput
  disconnect: Boolean
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input AdUpdateArgs {
  where: AdWhereUniqueInput!
  data: AdUpdateInput!
}

input AdCreateInput {
  name: String
  showOnHomepage: Boolean
  image: PhotoRelateToOneForCreateInput
  imageUrl: String
  state: String
  sortOrder: Int
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input PhotoRelateToOneForCreateInput {
  create: PhotoCreateInput
  connect: PhotoWhereUniqueInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type Attachment {
  id: ID!
  name: String
  description: String
  file: FileFieldOutput
  embedCode: String
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

type FileFieldOutput {
  filename: String!
  filesize: Int!
  url: String!
}

input AttachmentWhereUniqueInput {
  id: ID
}

input AttachmentWhereInput {
  AND: [AttachmentWhereInput!]
  OR: [AttachmentWhereInput!]
  NOT: [AttachmentWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  embedCode: StringFilter
  posts: PostManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input PostManyRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input AttachmentOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  embedCode: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input AttachmentUpdateInput {
  name: String
  description: String
  file: FileFieldInput
  embedCode: String
  posts: PostRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input FileFieldInput {
  upload: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input PostRelateToManyForUpdateInput {
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input AttachmentUpdateArgs {
  where: AttachmentWhereUniqueInput!
  data: AttachmentUpdateInput!
}

input AttachmentCreateInput {
  name: String
  description: String
  file: FileFieldInput
  embedCode: String
  posts: PostRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input PostRelateToManyForCreateInput {
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

type Author {
  id: ID!
  name: String
  image: Photo
  bio: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input AuthorWhereUniqueInput {
  id: ID
}

input AuthorWhereInput {
  AND: [AuthorWhereInput!]
  OR: [AuthorWhereInput!]
  NOT: [AuthorWhereInput!]
  id: IDFilter
  name: StringFilter
  image: PhotoWhereInput
  bio: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input AuthorOrderByInput {
  id: OrderDirection
  name: OrderDirection
  bio: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input AuthorUpdateInput {
  name: String
  image: PhotoRelateToOneForUpdateInput
  bio: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input AuthorUpdateArgs {
  where: AuthorWhereUniqueInput!
  data: AuthorUpdateInput!
}

input AuthorCreateInput {
  name: String
  image: PhotoRelateToOneForCreateInput
  bio: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type Category {
  id: ID!
  slug: String
  name: String
  sortOrder: Int
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  section: Section
  classifies(where: ClassifyWhereInput! = {}, orderBy: [ClassifyOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ClassifyWhereUniqueInput): [Classify!]
  classifiesCount(where: ClassifyWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input CategoryWhereUniqueInput {
  id: ID
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  id: IDFilter
  slug: StringFilter
  name: StringFilter
  sortOrder: IntNullableFilter
  posts: PostManyRelationFilter
  section: SectionWhereInput
  classifies: ClassifyManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input ClassifyManyRelationFilter {
  every: ClassifyWhereInput
  some: ClassifyWhereInput
  none: ClassifyWhereInput
}

input CategoryOrderByInput {
  id: OrderDirection
  slug: OrderDirection
  name: OrderDirection
  sortOrder: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input CategoryUpdateInput {
  slug: String
  name: String
  sortOrder: Int
  posts: PostRelateToManyForUpdateInput
  section: SectionRelateToOneForUpdateInput
  classifies: ClassifyRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input SectionRelateToOneForUpdateInput {
  create: SectionCreateInput
  connect: SectionWhereUniqueInput
  disconnect: Boolean
}

input ClassifyRelateToManyForUpdateInput {
  disconnect: [ClassifyWhereUniqueInput!]
  set: [ClassifyWhereUniqueInput!]
  create: [ClassifyCreateInput!]
  connect: [ClassifyWhereUniqueInput!]
}

input CategoryUpdateArgs {
  where: CategoryWhereUniqueInput!
  data: CategoryUpdateInput!
}

input CategoryCreateInput {
  slug: String
  name: String
  sortOrder: Int
  posts: PostRelateToManyForCreateInput
  section: SectionRelateToOneForCreateInput
  classifies: ClassifyRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input SectionRelateToOneForCreateInput {
  create: SectionCreateInput
  connect: SectionWhereUniqueInput
}

input ClassifyRelateToManyForCreateInput {
  create: [ClassifyCreateInput!]
  connect: [ClassifyWhereUniqueInput!]
}

type Classify {
  id: ID!
  slug: String
  name: String
  sortOrder: Int
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  category: Category
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input ClassifyWhereUniqueInput {
  id: ID
}

input ClassifyWhereInput {
  AND: [ClassifyWhereInput!]
  OR: [ClassifyWhereInput!]
  NOT: [ClassifyWhereInput!]
  id: IDFilter
  slug: StringFilter
  name: StringFilter
  sortOrder: IntNullableFilter
  posts: PostManyRelationFilter
  category: CategoryWhereInput
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input ClassifyOrderByInput {
  id: OrderDirection
  slug: OrderDirection
  name: OrderDirection
  sortOrder: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ClassifyUpdateInput {
  slug: String
  name: String
  sortOrder: Int
  posts: PostRelateToManyForUpdateInput
  category: CategoryRelateToOneForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input CategoryRelateToOneForUpdateInput {
  create: CategoryCreateInput
  connect: CategoryWhereUniqueInput
  disconnect: Boolean
}

input ClassifyUpdateArgs {
  where: ClassifyWhereUniqueInput!
  data: ClassifyUpdateInput!
}

input ClassifyCreateInput {
  slug: String
  name: String
  sortOrder: Int
  posts: PostRelateToManyForCreateInput
  category: CategoryRelateToOneForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input CategoryRelateToOneForCreateInput {
  create: CategoryCreateInput
  connect: CategoryWhereUniqueInput
}

type Config {
  id: ID!
  name: String
  type: String
  displayLocation: String
  title: String
  content: String
  image: Photo
  link: String
  state: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input ConfigWhereUniqueInput {
  id: ID
}

input ConfigWhereInput {
  AND: [ConfigWhereInput!]
  OR: [ConfigWhereInput!]
  NOT: [ConfigWhereInput!]
  id: IDFilter
  name: StringFilter
  type: StringNullableFilter
  displayLocation: StringNullableFilter
  title: StringFilter
  content: StringFilter
  image: PhotoWhereInput
  link: StringFilter
  state: StringNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input ConfigOrderByInput {
  id: OrderDirection
  name: OrderDirection
  type: OrderDirection
  displayLocation: OrderDirection
  title: OrderDirection
  content: OrderDirection
  link: OrderDirection
  state: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ConfigUpdateInput {
  name: String
  type: String
  displayLocation: String
  title: String
  content: String
  image: PhotoRelateToOneForUpdateInput
  link: String
  state: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input ConfigUpdateArgs {
  where: ConfigWhereUniqueInput!
  data: ConfigUpdateInput!
}

input ConfigCreateInput {
  name: String
  type: String
  displayLocation: String
  title: String
  content: String
  image: PhotoRelateToOneForCreateInput
  link: String
  state: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type Donation {
  id: ID!
  name: String
  donationType: String
  title: String
  subtitle: String
  description: String
  image: Photo
  state: String
  donationUrl: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input DonationWhereUniqueInput {
  id: ID
}

input DonationWhereInput {
  AND: [DonationWhereInput!]
  OR: [DonationWhereInput!]
  NOT: [DonationWhereInput!]
  id: IDFilter
  name: StringFilter
  donationType: StringFilter
  title: StringFilter
  subtitle: StringFilter
  description: StringFilter
  image: PhotoWhereInput
  state: StringFilter
  donationUrl: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input DonationOrderByInput {
  id: OrderDirection
  name: OrderDirection
  donationType: OrderDirection
  title: OrderDirection
  subtitle: OrderDirection
  description: OrderDirection
  state: OrderDirection
  donationUrl: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input DonationUpdateInput {
  name: String
  donationType: String
  title: String
  subtitle: String
  description: String
  image: PhotoRelateToOneForUpdateInput
  state: String
  donationUrl: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input DonationUpdateArgs {
  where: DonationWhereUniqueInput!
  data: DonationUpdateInput!
}

input DonationCreateInput {
  name: String
  donationType: String
  title: String
  subtitle: String
  description: String
  image: PhotoRelateToOneForCreateInput
  state: String
  donationUrl: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type DonationPV {
  id: ID!
  pageUrl: String
  clickTime: DateTime
  clickTimeString: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input DonationPVWhereUniqueInput {
  id: ID
}

input DonationPVWhereInput {
  AND: [DonationPVWhereInput!]
  OR: [DonationPVWhereInput!]
  NOT: [DonationPVWhereInput!]
  id: IDFilter
  pageUrl: StringFilter
  clickTime: DateTimeFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeFilter
}

input DonationPVOrderByInput {
  id: OrderDirection
  pageUrl: OrderDirection
  clickTime: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input DonationPVUpdateInput {
  pageUrl: String
  clickTime: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input DonationPVUpdateArgs {
  where: DonationPVWhereUniqueInput!
  data: DonationPVUpdateInput!
}

input DonationPVCreateInput {
  pageUrl: String
  clickTime: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type Event {
  id: ID!
  name: String
  heroImage: Photo
  organizer: String
  contactInfo: String
  eventType: String
  startDate: DateTime
  endDate: DateTime
  location: String
  fee: String
  registrationUrl: String
  content: String
  isApproved: Boolean
  showOnHomepage: Boolean
  sortOrder: Int
  state: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input EventWhereUniqueInput {
  id: ID
}

input EventWhereInput {
  AND: [EventWhereInput!]
  OR: [EventWhereInput!]
  NOT: [EventWhereInput!]
  id: IDFilter
  name: StringFilter
  heroImage: PhotoWhereInput
  organizer: StringFilter
  contactInfo: StringFilter
  eventType: StringFilter
  startDate: DateTimeFilter
  endDate: DateTimeFilter
  location: StringFilter
  fee: StringFilter
  registrationUrl: StringFilter
  content: StringFilter
  isApproved: BooleanFilter
  showOnHomepage: BooleanFilter
  sortOrder: IntFilter
  state: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input EventOrderByInput {
  id: OrderDirection
  name: OrderDirection
  organizer: OrderDirection
  contactInfo: OrderDirection
  eventType: OrderDirection
  startDate: OrderDirection
  endDate: OrderDirection
  location: OrderDirection
  fee: OrderDirection
  registrationUrl: OrderDirection
  content: OrderDirection
  isApproved: OrderDirection
  showOnHomepage: OrderDirection
  sortOrder: OrderDirection
  state: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input EventUpdateInput {
  name: String
  heroImage: PhotoRelateToOneForUpdateInput
  organizer: String
  contactInfo: String
  eventType: String
  startDate: DateTime
  endDate: DateTime
  location: String
  fee: String
  registrationUrl: String
  content: String
  isApproved: Boolean
  showOnHomepage: Boolean
  sortOrder: Int
  state: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input EventUpdateArgs {
  where: EventWhereUniqueInput!
  data: EventUpdateInput!
}

input EventCreateInput {
  name: String
  heroImage: PhotoRelateToOneForCreateInput
  organizer: String
  contactInfo: String
  eventType: String
  startDate: DateTime
  endDate: DateTime
  location: String
  fee: String
  registrationUrl: String
  content: String
  isApproved: Boolean
  showOnHomepage: Boolean
  sortOrder: Int
  state: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type Favorite {
  id: ID!
  member: Member
  post: Post
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input FavoriteWhereUniqueInput {
  id: ID
}

input FavoriteWhereInput {
  AND: [FavoriteWhereInput!]
  OR: [FavoriteWhereInput!]
  NOT: [FavoriteWhereInput!]
  id: IDFilter
  member: MemberWhereInput
  post: PostWhereInput
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input FavoriteOrderByInput {
  id: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input FavoriteUpdateInput {
  member: MemberRelateToOneForUpdateInput
  post: PostRelateToOneForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input MemberRelateToOneForUpdateInput {
  create: MemberCreateInput
  connect: MemberWhereUniqueInput
  disconnect: Boolean
}

input PostRelateToOneForUpdateInput {
  create: PostCreateInput
  connect: PostWhereUniqueInput
  disconnect: Boolean
}

input FavoriteUpdateArgs {
  where: FavoriteWhereUniqueInput!
  data: FavoriteUpdateInput!
}

input FavoriteCreateInput {
  member: MemberRelateToOneForCreateInput
  post: PostRelateToOneForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input MemberRelateToOneForCreateInput {
  create: MemberCreateInput
  connect: MemberWhereUniqueInput
}

input PostRelateToOneForCreateInput {
  create: PostCreateInput
  connect: PostWhereUniqueInput
}

type HomepagePick {
  id: ID!
  category: Category
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  topics(where: TopicWhereInput! = {}, orderBy: [TopicOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TopicWhereUniqueInput): [Topic!]
  topicsCount(where: TopicWhereInput! = {}): Int
  customUrl: String
  customImage: Photo
  customTitle: String
  customDescription: String
  sortOrder: Int
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input HomepagePickWhereUniqueInput {
  id: ID
}

input HomepagePickWhereInput {
  AND: [HomepagePickWhereInput!]
  OR: [HomepagePickWhereInput!]
  NOT: [HomepagePickWhereInput!]
  id: IDFilter
  category: CategoryWhereInput
  posts: PostManyRelationFilter
  topics: TopicManyRelationFilter
  customUrl: StringFilter
  customImage: PhotoWhereInput
  customTitle: StringFilter
  customDescription: StringFilter
  sortOrder: IntFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input TopicManyRelationFilter {
  every: TopicWhereInput
  some: TopicWhereInput
  none: TopicWhereInput
}

input HomepagePickOrderByInput {
  id: OrderDirection
  customUrl: OrderDirection
  customTitle: OrderDirection
  customDescription: OrderDirection
  sortOrder: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input HomepagePickUpdateInput {
  category: CategoryRelateToOneForUpdateInput
  posts: PostRelateToManyForUpdateInput
  topics: TopicRelateToManyForUpdateInput
  customUrl: String
  customImage: PhotoRelateToOneForUpdateInput
  customTitle: String
  customDescription: String
  sortOrder: Int
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input TopicRelateToManyForUpdateInput {
  disconnect: [TopicWhereUniqueInput!]
  set: [TopicWhereUniqueInput!]
  create: [TopicCreateInput!]
  connect: [TopicWhereUniqueInput!]
}

input HomepagePickUpdateArgs {
  where: HomepagePickWhereUniqueInput!
  data: HomepagePickUpdateInput!
}

input HomepagePickCreateInput {
  category: CategoryRelateToOneForCreateInput
  posts: PostRelateToManyForCreateInput
  topics: TopicRelateToManyForCreateInput
  customUrl: String
  customImage: PhotoRelateToOneForCreateInput
  customTitle: String
  customDescription: String
  sortOrder: Int
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input TopicRelateToManyForCreateInput {
  create: [TopicCreateInput!]
  connect: [TopicWhereUniqueInput!]
}

type InfoGraph {
  id: ID!
  name: String
  title: String
  description: String
  image: Photo
  youtubeUrl: String
  state: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input InfoGraphWhereUniqueInput {
  id: ID
}

input InfoGraphWhereInput {
  AND: [InfoGraphWhereInput!]
  OR: [InfoGraphWhereInput!]
  NOT: [InfoGraphWhereInput!]
  id: IDFilter
  name: StringFilter
  title: StringFilter
  description: StringFilter
  image: PhotoWhereInput
  youtubeUrl: StringFilter
  state: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input InfoGraphOrderByInput {
  id: OrderDirection
  name: OrderDirection
  title: OrderDirection
  description: OrderDirection
  youtubeUrl: OrderDirection
  state: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input InfoGraphUpdateInput {
  name: String
  title: String
  description: String
  image: PhotoRelateToOneForUpdateInput
  youtubeUrl: String
  state: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input InfoGraphUpdateArgs {
  where: InfoGraphWhereUniqueInput!
  data: InfoGraphUpdateInput!
}

input InfoGraphCreateInput {
  name: String
  title: String
  description: String
  image: PhotoRelateToOneForCreateInput
  youtubeUrl: String
  state: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type Job {
  id: ID!
  title: String
  company: String
  jobDescription: String
  requirements: String
  salary: String
  bonus: String
  applicationMethod: String
  startDate: DateTime
  endDate: DateTime
  isApproved: Boolean
  showOnHomepage: Boolean
  sortOrder: Int
  state: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input JobWhereUniqueInput {
  id: ID
}

input JobWhereInput {
  AND: [JobWhereInput!]
  OR: [JobWhereInput!]
  NOT: [JobWhereInput!]
  id: IDFilter
  title: StringFilter
  company: StringFilter
  jobDescription: StringFilter
  requirements: StringFilter
  salary: StringFilter
  bonus: StringFilter
  applicationMethod: StringFilter
  startDate: DateTimeFilter
  endDate: DateTimeFilter
  isApproved: BooleanFilter
  showOnHomepage: BooleanFilter
  sortOrder: IntFilter
  state: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input JobOrderByInput {
  id: OrderDirection
  title: OrderDirection
  company: OrderDirection
  jobDescription: OrderDirection
  requirements: OrderDirection
  salary: OrderDirection
  bonus: OrderDirection
  applicationMethod: OrderDirection
  startDate: OrderDirection
  endDate: OrderDirection
  isApproved: OrderDirection
  showOnHomepage: OrderDirection
  sortOrder: OrderDirection
  state: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input JobUpdateInput {
  title: String
  company: String
  jobDescription: String
  requirements: String
  salary: String
  bonus: String
  applicationMethod: String
  startDate: DateTime
  endDate: DateTime
  isApproved: Boolean
  showOnHomepage: Boolean
  sortOrder: Int
  state: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input JobUpdateArgs {
  where: JobWhereUniqueInput!
  data: JobUpdateInput!
}

input JobCreateInput {
  title: String
  company: String
  jobDescription: String
  requirements: String
  salary: String
  bonus: String
  applicationMethod: String
  startDate: DateTime
  endDate: DateTime
  isApproved: Boolean
  showOnHomepage: Boolean
  sortOrder: Int
  state: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type Location {
  id: ID!
  name: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input LocationWhereUniqueInput {
  id: ID
}

input LocationWhereInput {
  AND: [LocationWhereInput!]
  OR: [LocationWhereInput!]
  NOT: [LocationWhereInput!]
  id: IDFilter
  name: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input LocationOrderByInput {
  id: OrderDirection
  name: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input LocationUpdateInput {
  name: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input LocationUpdateArgs {
  where: LocationWhereUniqueInput!
  data: LocationUpdateInput!
}

input LocationCreateInput {
  name: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type Member {
  id: ID!
  firebaseId: String
  lastName: String
  firstName: String
  avatar: Photo
  city: String
  birthDate: DateTime
  email: String
  state: String
  favorites(where: FavoriteWhereInput! = {}, orderBy: [FavoriteOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FavoriteWhereUniqueInput): [Favorite!]
  favoritesCount(where: FavoriteWhereInput! = {}): Int
  interestedSections(where: SectionWhereInput! = {}, orderBy: [SectionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SectionWhereUniqueInput): [Section!]
  interestedSectionsCount(where: SectionWhereInput! = {}): Int
  newsletterSubscription: String
  newsletterFrequency: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input MemberWhereUniqueInput {
  id: ID
  firebaseId: String
  email: String
}

input MemberWhereInput {
  AND: [MemberWhereInput!]
  OR: [MemberWhereInput!]
  NOT: [MemberWhereInput!]
  id: IDFilter
  firebaseId: StringFilter
  lastName: StringFilter
  firstName: StringFilter
  avatar: PhotoWhereInput
  city: StringFilter
  birthDate: DateTimeNullableFilter
  email: StringFilter
  state: StringNullableFilter
  favorites: FavoriteManyRelationFilter
  interestedSections: SectionManyRelationFilter
  newsletterSubscription: StringNullableFilter
  newsletterFrequency: StringNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input FavoriteManyRelationFilter {
  every: FavoriteWhereInput
  some: FavoriteWhereInput
  none: FavoriteWhereInput
}

input SectionManyRelationFilter {
  every: SectionWhereInput
  some: SectionWhereInput
  none: SectionWhereInput
}

input MemberOrderByInput {
  id: OrderDirection
  firebaseId: OrderDirection
  lastName: OrderDirection
  firstName: OrderDirection
  city: OrderDirection
  birthDate: OrderDirection
  email: OrderDirection
  state: OrderDirection
  newsletterSubscription: OrderDirection
  newsletterFrequency: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input MemberUpdateInput {
  firebaseId: String
  lastName: String
  firstName: String
  avatar: PhotoRelateToOneForUpdateInput
  city: String
  birthDate: DateTime
  email: String
  state: String
  favorites: FavoriteRelateToManyForUpdateInput
  interestedSections: SectionRelateToManyForUpdateInput
  newsletterSubscription: String
  newsletterFrequency: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input FavoriteRelateToManyForUpdateInput {
  disconnect: [FavoriteWhereUniqueInput!]
  set: [FavoriteWhereUniqueInput!]
  create: [FavoriteCreateInput!]
  connect: [FavoriteWhereUniqueInput!]
}

input SectionRelateToManyForUpdateInput {
  disconnect: [SectionWhereUniqueInput!]
  set: [SectionWhereUniqueInput!]
  create: [SectionCreateInput!]
  connect: [SectionWhereUniqueInput!]
}

input MemberUpdateArgs {
  where: MemberWhereUniqueInput!
  data: MemberUpdateInput!
}

input MemberCreateInput {
  firebaseId: String
  lastName: String
  firstName: String
  avatar: PhotoRelateToOneForCreateInput
  city: String
  birthDate: DateTime
  email: String
  state: String
  favorites: FavoriteRelateToManyForCreateInput
  interestedSections: SectionRelateToManyForCreateInput
  newsletterSubscription: String
  newsletterFrequency: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input FavoriteRelateToManyForCreateInput {
  create: [FavoriteCreateInput!]
  connect: [FavoriteWhereUniqueInput!]
}

input SectionRelateToManyForCreateInput {
  create: [SectionCreateInput!]
  connect: [SectionWhereUniqueInput!]
}

type Newsletter {
  id: ID!
  title: String
  heroImage: Photo
  sendDate: DateTime
  showMenu: Boolean
  showReadingRank: Boolean
  focusPosts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  focusPostsCount(where: PostWhereInput! = {}): Int
  relatedPosts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  relatedPostsCount(where: PostWhereInput! = {}): Int
  ads(where: AdWhereInput! = {}, orderBy: [AdOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AdWhereUniqueInput): [Ad!]
  adsCount(where: AdWhereInput! = {}): Int
  events(where: EventWhereInput! = {}, orderBy: [EventOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EventWhereUniqueInput): [Event!]
  eventsCount(where: EventWhereInput! = {}): Int
  poll: Poll
  readerResponseTitle: String
  readerResponseLink: String
  readerResponseText: String
  standardHtml: String
  beautifiedHtml: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input NewsletterWhereUniqueInput {
  id: ID
}

input NewsletterWhereInput {
  AND: [NewsletterWhereInput!]
  OR: [NewsletterWhereInput!]
  NOT: [NewsletterWhereInput!]
  id: IDFilter
  title: StringFilter
  heroImage: PhotoWhereInput
  sendDate: DateTimeFilter
  showMenu: BooleanFilter
  showReadingRank: BooleanFilter
  focusPosts: PostManyRelationFilter
  relatedPosts: PostManyRelationFilter
  ads: AdManyRelationFilter
  events: EventManyRelationFilter
  poll: PollWhereInput
  readerResponseTitle: StringFilter
  readerResponseLink: StringFilter
  readerResponseText: StringFilter
  standardHtml: StringFilter
  beautifiedHtml: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input AdManyRelationFilter {
  every: AdWhereInput
  some: AdWhereInput
  none: AdWhereInput
}

input EventManyRelationFilter {
  every: EventWhereInput
  some: EventWhereInput
  none: EventWhereInput
}

input NewsletterOrderByInput {
  id: OrderDirection
  title: OrderDirection
  sendDate: OrderDirection
  showMenu: OrderDirection
  showReadingRank: OrderDirection
  readerResponseTitle: OrderDirection
  readerResponseLink: OrderDirection
  readerResponseText: OrderDirection
  standardHtml: OrderDirection
  beautifiedHtml: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input NewsletterUpdateInput {
  title: String
  heroImage: PhotoRelateToOneForUpdateInput
  sendDate: DateTime
  showMenu: Boolean
  showReadingRank: Boolean
  focusPosts: PostRelateToManyForUpdateInput
  relatedPosts: PostRelateToManyForUpdateInput
  ads: AdRelateToManyForUpdateInput
  events: EventRelateToManyForUpdateInput
  poll: PollRelateToOneForUpdateInput
  readerResponseTitle: String
  readerResponseLink: String
  readerResponseText: String
  standardHtml: String
  beautifiedHtml: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input AdRelateToManyForUpdateInput {
  disconnect: [AdWhereUniqueInput!]
  set: [AdWhereUniqueInput!]
  create: [AdCreateInput!]
  connect: [AdWhereUniqueInput!]
}

input EventRelateToManyForUpdateInput {
  disconnect: [EventWhereUniqueInput!]
  set: [EventWhereUniqueInput!]
  create: [EventCreateInput!]
  connect: [EventWhereUniqueInput!]
}

input PollRelateToOneForUpdateInput {
  create: PollCreateInput
  connect: PollWhereUniqueInput
  disconnect: Boolean
}

input NewsletterUpdateArgs {
  where: NewsletterWhereUniqueInput!
  data: NewsletterUpdateInput!
}

input NewsletterCreateInput {
  title: String
  heroImage: PhotoRelateToOneForCreateInput
  sendDate: DateTime
  showMenu: Boolean
  showReadingRank: Boolean
  focusPosts: PostRelateToManyForCreateInput
  relatedPosts: PostRelateToManyForCreateInput
  ads: AdRelateToManyForCreateInput
  events: EventRelateToManyForCreateInput
  poll: PollRelateToOneForCreateInput
  readerResponseTitle: String
  readerResponseLink: String
  readerResponseText: String
  standardHtml: String
  beautifiedHtml: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input AdRelateToManyForCreateInput {
  create: [AdCreateInput!]
  connect: [AdWhereUniqueInput!]
}

input EventRelateToManyForCreateInput {
  create: [EventCreateInput!]
  connect: [EventWhereUniqueInput!]
}

input PollRelateToOneForCreateInput {
  create: PollCreateInput
  connect: PollWhereUniqueInput
}

type Photo {
  id: ID!
  name: String
  description: String
  imageFile: ImageFieldOutput
  resized: ResizedImages
  resizedWebp: ResizedWebPImages
  file: FileFieldOutput
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

type ResizedImages {
  original: String
  w480: String
  w800: String
  w1200: String
  w1600: String
  w2400: String
}

type ResizedWebPImages {
  original: String
  w480: String
  w800: String
  w1200: String
  w1600: String
  w2400: String
}

input PhotoWhereUniqueInput {
  id: ID
}

input PhotoWhereInput {
  AND: [PhotoWhereInput!]
  OR: [PhotoWhereInput!]
  NOT: [PhotoWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  posts: PostManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input PhotoOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input PhotoUpdateInput {
  name: String
  description: String
  imageFile: ImageFieldInput
  file: FileFieldInput
  posts: PostRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input ImageFieldInput {
  upload: Upload!
}

input PhotoUpdateArgs {
  where: PhotoWhereUniqueInput!
  data: PhotoUpdateInput!
}

input PhotoCreateInput {
  name: String
  description: String
  imageFile: ImageFieldInput
  file: FileFieldInput
  posts: PostRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type Poll {
  id: ID!
  name: String
  content: String
  option1: String
  option1Image: Photo
  option2: String
  option2Image: Photo
  option3: String
  option3Image: Photo
  option4: String
  option4Image: Photo
  option5: String
  option5Image: Photo
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  status: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input PollWhereUniqueInput {
  id: ID
}

input PollWhereInput {
  AND: [PollWhereInput!]
  OR: [PollWhereInput!]
  NOT: [PollWhereInput!]
  id: IDFilter
  name: StringFilter
  content: StringFilter
  option1: StringFilter
  option1Image: PhotoWhereInput
  option2: StringFilter
  option2Image: PhotoWhereInput
  option3: StringFilter
  option3Image: PhotoWhereInput
  option4: StringFilter
  option4Image: PhotoWhereInput
  option5: StringFilter
  option5Image: PhotoWhereInput
  posts: PostManyRelationFilter
  status: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input PollOrderByInput {
  id: OrderDirection
  name: OrderDirection
  content: OrderDirection
  option1: OrderDirection
  option2: OrderDirection
  option3: OrderDirection
  option4: OrderDirection
  option5: OrderDirection
  status: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input PollUpdateInput {
  name: String
  content: String
  option1: String
  option1Image: PhotoRelateToOneForUpdateInput
  option2: String
  option2Image: PhotoRelateToOneForUpdateInput
  option3: String
  option3Image: PhotoRelateToOneForUpdateInput
  option4: String
  option4Image: PhotoRelateToOneForUpdateInput
  option5: String
  option5Image: PhotoRelateToOneForUpdateInput
  posts: PostRelateToManyForUpdateInput
  status: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input PollUpdateArgs {
  where: PollWhereUniqueInput!
  data: PollUpdateInput!
}

input PollCreateInput {
  name: String
  content: String
  option1: String
  option1Image: PhotoRelateToOneForCreateInput
  option2: String
  option2Image: PhotoRelateToOneForCreateInput
  option3: String
  option3Image: PhotoRelateToOneForCreateInput
  option4: String
  option4Image: PhotoRelateToOneForCreateInput
  option5: String
  option5Image: PhotoRelateToOneForCreateInput
  posts: PostRelateToManyForCreateInput
  status: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type PollResult {
  id: ID!
  poll: Poll
  member(where: MemberWhereInput! = {}, orderBy: [MemberOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MemberWhereUniqueInput): [Member!]
  memberCount(where: MemberWhereInput! = {}): Int
  post: Post
  result: String
  endTime: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input PollResultWhereUniqueInput {
  id: ID
}

input PollResultWhereInput {
  AND: [PollResultWhereInput!]
  OR: [PollResultWhereInput!]
  NOT: [PollResultWhereInput!]
  id: IDFilter
  poll: PollWhereInput
  member: MemberManyRelationFilter
  post: PostWhereInput
  result: StringFilter
  endTime: DateTimeFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input MemberManyRelationFilter {
  every: MemberWhereInput
  some: MemberWhereInput
  none: MemberWhereInput
}

input PollResultOrderByInput {
  id: OrderDirection
  result: OrderDirection
  endTime: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input PollResultUpdateInput {
  poll: PollRelateToOneForUpdateInput
  member: MemberRelateToManyForUpdateInput
  post: PostRelateToOneForUpdateInput
  result: String
  endTime: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input MemberRelateToManyForUpdateInput {
  disconnect: [MemberWhereUniqueInput!]
  set: [MemberWhereUniqueInput!]
  create: [MemberCreateInput!]
  connect: [MemberWhereUniqueInput!]
}

input PollResultUpdateArgs {
  where: PollResultWhereUniqueInput!
  data: PollResultUpdateInput!
}

input PollResultCreateInput {
  poll: PollRelateToOneForCreateInput
  member: MemberRelateToManyForCreateInput
  post: PostRelateToOneForCreateInput
  result: String
  endTime: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input MemberRelateToManyForCreateInput {
  create: [MemberCreateInput!]
  connect: [MemberWhereUniqueInput!]
}

type Post {
  id: ID!
  title: String
  subtitle: String
  state: String
  publishTime: DateTime
  ogImage: Photo
  author1: Author
  author2: Author
  author3: Author
  otherByline: String
  locations(where: LocationWhereInput! = {}, orderBy: [LocationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LocationWhereUniqueInput): [Location!]
  locationsCount(where: LocationWhereInput! = {}): Int
  section: Section
  category: Category
  classify: Classify
  topic: Topic
  style: String
  heroImage: Photo
  heroCaption: String
  content: JSON
  attachments(where: AttachmentWhereInput! = {}, orderBy: [AttachmentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AttachmentWhereUniqueInput): [Attachment!]
  attachmentsCount(where: AttachmentWhereInput! = {}): Int
  citations: String
  relatedPosts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  relatedPostsCount(where: PostWhereInput! = {}): Int
  ad1: Ad
  ad2: Ad
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  rssTargets: [String!]
  poll: Poll
  pollResult: PollResult
  aiPollHelper: Boolean
  aiPollHelperResult: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input PostWhereUniqueInput {
  id: ID
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  title: StringFilter
  subtitle: StringNullableFilter
  state: StringNullableFilter
  publishTime: DateTimeFilter
  ogImage: PhotoWhereInput
  author1: AuthorWhereInput
  author2: AuthorWhereInput
  author3: AuthorWhereInput
  otherByline: StringFilter
  locations: LocationManyRelationFilter
  section: SectionWhereInput
  category: CategoryWhereInput
  classify: ClassifyWhereInput
  topic: TopicWhereInput
  style: StringNullableFilter
  heroImage: PhotoWhereInput
  heroCaption: StringFilter
  attachments: AttachmentManyRelationFilter
  citations: StringFilter
  relatedPosts: PostManyRelationFilter
  ad1: AdWhereInput
  ad2: AdWhereInput
  tags: TagManyRelationFilter
  poll: PollWhereInput
  pollResult: PollResultWhereInput
  aiPollHelper: BooleanFilter
  aiPollHelperResult: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input LocationManyRelationFilter {
  every: LocationWhereInput
  some: LocationWhereInput
  none: LocationWhereInput
}

input AttachmentManyRelationFilter {
  every: AttachmentWhereInput
  some: AttachmentWhereInput
  none: AttachmentWhereInput
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input PostOrderByInput {
  id: OrderDirection
  title: OrderDirection
  subtitle: OrderDirection
  state: OrderDirection
  publishTime: OrderDirection
  otherByline: OrderDirection
  style: OrderDirection
  heroCaption: OrderDirection
  citations: OrderDirection
  aiPollHelper: OrderDirection
  aiPollHelperResult: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input PostUpdateInput {
  title: String
  subtitle: String
  state: String
  publishTime: DateTime
  ogImage: PhotoRelateToOneForUpdateInput
  author1: AuthorRelateToOneForUpdateInput
  author2: AuthorRelateToOneForUpdateInput
  author3: AuthorRelateToOneForUpdateInput
  otherByline: String
  locations: LocationRelateToManyForUpdateInput
  section: SectionRelateToOneForUpdateInput
  category: CategoryRelateToOneForUpdateInput
  classify: ClassifyRelateToOneForUpdateInput
  topic: TopicRelateToOneForUpdateInput
  style: String
  heroImage: PhotoRelateToOneForUpdateInput
  heroCaption: String
  content: JSON
  attachments: AttachmentRelateToManyForUpdateInput
  citations: String
  relatedPosts: PostRelateToManyForUpdateInput
  ad1: AdRelateToOneForUpdateInput
  ad2: AdRelateToOneForUpdateInput
  tags: TagRelateToManyForUpdateInput
  rssTargets: [String!]
  poll: PollRelateToOneForUpdateInput
  pollResult: PollResultRelateToOneForUpdateInput
  aiPollHelper: Boolean
  aiPollHelperResult: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input AuthorRelateToOneForUpdateInput {
  create: AuthorCreateInput
  connect: AuthorWhereUniqueInput
  disconnect: Boolean
}

input LocationRelateToManyForUpdateInput {
  disconnect: [LocationWhereUniqueInput!]
  set: [LocationWhereUniqueInput!]
  create: [LocationCreateInput!]
  connect: [LocationWhereUniqueInput!]
}

input ClassifyRelateToOneForUpdateInput {
  create: ClassifyCreateInput
  connect: ClassifyWhereUniqueInput
  disconnect: Boolean
}

input TopicRelateToOneForUpdateInput {
  create: TopicCreateInput
  connect: TopicWhereUniqueInput
  disconnect: Boolean
}

input AttachmentRelateToManyForUpdateInput {
  disconnect: [AttachmentWhereUniqueInput!]
  set: [AttachmentWhereUniqueInput!]
  create: [AttachmentCreateInput!]
  connect: [AttachmentWhereUniqueInput!]
}

input AdRelateToOneForUpdateInput {
  create: AdCreateInput
  connect: AdWhereUniqueInput
  disconnect: Boolean
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input PollResultRelateToOneForUpdateInput {
  create: PollResultCreateInput
  connect: PollResultWhereUniqueInput
  disconnect: Boolean
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  title: String
  subtitle: String
  state: String
  publishTime: DateTime
  ogImage: PhotoRelateToOneForCreateInput
  author1: AuthorRelateToOneForCreateInput
  author2: AuthorRelateToOneForCreateInput
  author3: AuthorRelateToOneForCreateInput
  otherByline: String
  locations: LocationRelateToManyForCreateInput
  section: SectionRelateToOneForCreateInput
  category: CategoryRelateToOneForCreateInput
  classify: ClassifyRelateToOneForCreateInput
  topic: TopicRelateToOneForCreateInput
  style: String
  heroImage: PhotoRelateToOneForCreateInput
  heroCaption: String
  content: JSON
  attachments: AttachmentRelateToManyForCreateInput
  citations: String
  relatedPosts: PostRelateToManyForCreateInput
  ad1: AdRelateToOneForCreateInput
  ad2: AdRelateToOneForCreateInput
  tags: TagRelateToManyForCreateInput
  rssTargets: [String!]
  poll: PollRelateToOneForCreateInput
  pollResult: PollResultRelateToOneForCreateInput
  aiPollHelper: Boolean
  aiPollHelperResult: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input AuthorRelateToOneForCreateInput {
  create: AuthorCreateInput
  connect: AuthorWhereUniqueInput
}

input LocationRelateToManyForCreateInput {
  create: [LocationCreateInput!]
  connect: [LocationWhereUniqueInput!]
}

input ClassifyRelateToOneForCreateInput {
  create: ClassifyCreateInput
  connect: ClassifyWhereUniqueInput
}

input TopicRelateToOneForCreateInput {
  create: TopicCreateInput
  connect: TopicWhereUniqueInput
}

input AttachmentRelateToManyForCreateInput {
  create: [AttachmentCreateInput!]
  connect: [AttachmentWhereUniqueInput!]
}

input AdRelateToOneForCreateInput {
  create: AdCreateInput
  connect: AdWhereUniqueInput
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input PollResultRelateToOneForCreateInput {
  create: PollResultCreateInput
  connect: PollResultWhereUniqueInput
}

type ReadingHistory {
  id: ID!
  member: Member
  post: Post
  readTime: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input ReadingHistoryWhereUniqueInput {
  id: ID
}

input ReadingHistoryWhereInput {
  AND: [ReadingHistoryWhereInput!]
  OR: [ReadingHistoryWhereInput!]
  NOT: [ReadingHistoryWhereInput!]
  id: IDFilter
  member: MemberWhereInput
  post: PostWhereInput
  readTime: DateTimeFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input ReadingHistoryOrderByInput {
  id: OrderDirection
  readTime: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ReadingHistoryUpdateInput {
  member: MemberRelateToOneForUpdateInput
  post: PostRelateToOneForUpdateInput
  readTime: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input ReadingHistoryUpdateArgs {
  where: ReadingHistoryWhereUniqueInput!
  data: ReadingHistoryUpdateInput!
}

input ReadingHistoryCreateInput {
  member: MemberRelateToOneForCreateInput
  post: PostRelateToOneForCreateInput
  readTime: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type Section {
  id: ID!
  slug: String
  name: String
  style: String
  showInHeader: Boolean
  sortOrder: Int
  categories(where: CategoryWhereInput! = {}, orderBy: [CategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CategoryWhereUniqueInput): [Category!]
  categoriesCount(where: CategoryWhereInput! = {}): Int
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input SectionWhereUniqueInput {
  id: ID
}

input SectionWhereInput {
  AND: [SectionWhereInput!]
  OR: [SectionWhereInput!]
  NOT: [SectionWhereInput!]
  id: IDFilter
  slug: StringFilter
  name: StringFilter
  style: StringNullableFilter
  showInHeader: BooleanFilter
  sortOrder: IntNullableFilter
  categories: CategoryManyRelationFilter
  posts: PostManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input CategoryManyRelationFilter {
  every: CategoryWhereInput
  some: CategoryWhereInput
  none: CategoryWhereInput
}

input SectionOrderByInput {
  id: OrderDirection
  slug: OrderDirection
  name: OrderDirection
  style: OrderDirection
  showInHeader: OrderDirection
  sortOrder: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input SectionUpdateInput {
  slug: String
  name: String
  style: String
  showInHeader: Boolean
  sortOrder: Int
  categories: CategoryRelateToManyForUpdateInput
  posts: PostRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input CategoryRelateToManyForUpdateInput {
  disconnect: [CategoryWhereUniqueInput!]
  set: [CategoryWhereUniqueInput!]
  create: [CategoryCreateInput!]
  connect: [CategoryWhereUniqueInput!]
}

input SectionUpdateArgs {
  where: SectionWhereUniqueInput!
  data: SectionUpdateInput!
}

input SectionCreateInput {
  slug: String
  name: String
  style: String
  showInHeader: Boolean
  sortOrder: Int
  categories: CategoryRelateToManyForCreateInput
  posts: PostRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input CategoryRelateToManyForCreateInput {
  create: [CategoryCreateInput!]
  connect: [CategoryWhereUniqueInput!]
}

type Tag {
  id: ID!
  name: String
  brief: String
  heroImage: Photo
  isFeatured: Boolean
  sortOrder: Int
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  topics(where: TopicWhereInput! = {}, orderBy: [TopicOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TopicWhereUniqueInput): [Topic!]
  topicsCount(where: TopicWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input TagWhereUniqueInput {
  id: ID
  name: String
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  name: StringFilter
  brief: StringFilter
  heroImage: PhotoWhereInput
  isFeatured: BooleanFilter
  sortOrder: IntNullableFilter
  posts: PostManyRelationFilter
  topics: TopicManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
  brief: OrderDirection
  isFeatured: OrderDirection
  sortOrder: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input TagUpdateInput {
  name: String
  brief: String
  heroImage: PhotoRelateToOneForUpdateInput
  isFeatured: Boolean
  sortOrder: Int
  posts: PostRelateToManyForUpdateInput
  topics: TopicRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  name: String
  brief: String
  heroImage: PhotoRelateToOneForCreateInput
  isFeatured: Boolean
  sortOrder: Int
  posts: PostRelateToManyForCreateInput
  topics: TopicRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type Timeline {
  id: ID!
  name: String
  description: String
  items(where: TimelineItemWhereInput! = {}, orderBy: [TimelineItemOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TimelineItemWhereUniqueInput): [TimelineItem!]
  itemsCount(where: TimelineItemWhereInput! = {}): Int
  sortOrder: String
  embedCode: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input TimelineWhereUniqueInput {
  id: ID
}

input TimelineWhereInput {
  AND: [TimelineWhereInput!]
  OR: [TimelineWhereInput!]
  NOT: [TimelineWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  items: TimelineItemManyRelationFilter
  sortOrder: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input TimelineItemManyRelationFilter {
  every: TimelineItemWhereInput
  some: TimelineItemWhereInput
  none: TimelineItemWhereInput
}

input TimelineOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  sortOrder: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input TimelineUpdateInput {
  name: String
  description: String
  items: TimelineItemRelateToManyForUpdateInput
  sortOrder: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input TimelineItemRelateToManyForUpdateInput {
  disconnect: [TimelineItemWhereUniqueInput!]
  set: [TimelineItemWhereUniqueInput!]
  create: [TimelineItemCreateInput!]
  connect: [TimelineItemWhereUniqueInput!]
}

input TimelineUpdateArgs {
  where: TimelineWhereUniqueInput!
  data: TimelineUpdateInput!
}

input TimelineCreateInput {
  name: String
  description: String
  items: TimelineItemRelateToManyForCreateInput
  sortOrder: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input TimelineItemRelateToManyForCreateInput {
  create: [TimelineItemCreateInput!]
  connect: [TimelineItemWhereUniqueInput!]
}

type TimelineItem {
  id: ID!
  title: String
  eventTime: DateTime
  timeFormat: String
  content: String
  image: Photo
  imageCaption: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input TimelineItemWhereUniqueInput {
  id: ID
}

input TimelineItemWhereInput {
  AND: [TimelineItemWhereInput!]
  OR: [TimelineItemWhereInput!]
  NOT: [TimelineItemWhereInput!]
  id: IDFilter
  title: StringFilter
  eventTime: DateTimeFilter
  timeFormat: StringFilter
  content: StringFilter
  image: PhotoWhereInput
  imageCaption: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input TimelineItemOrderByInput {
  id: OrderDirection
  title: OrderDirection
  eventTime: OrderDirection
  timeFormat: OrderDirection
  content: OrderDirection
  imageCaption: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input TimelineItemUpdateInput {
  title: String
  eventTime: DateTime
  timeFormat: String
  content: String
  image: PhotoRelateToOneForUpdateInput
  imageCaption: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input TimelineItemUpdateArgs {
  where: TimelineItemWhereUniqueInput!
  data: TimelineItemUpdateInput!
}

input TimelineItemCreateInput {
  title: String
  eventTime: DateTime
  timeFormat: String
  content: String
  image: PhotoRelateToOneForCreateInput
  imageCaption: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type Topic {
  id: ID!
  title: String
  status: String
  content: String
  heroImage: Photo
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  isPinned: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input TopicWhereUniqueInput {
  id: ID
}

input TopicWhereInput {
  AND: [TopicWhereInput!]
  OR: [TopicWhereInput!]
  NOT: [TopicWhereInput!]
  id: IDFilter
  title: StringFilter
  status: StringFilter
  content: StringFilter
  heroImage: PhotoWhereInput
  posts: PostManyRelationFilter
  tags: TagManyRelationFilter
  isPinned: BooleanFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input TopicOrderByInput {
  id: OrderDirection
  title: OrderDirection
  status: OrderDirection
  content: OrderDirection
  isPinned: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input TopicUpdateInput {
  title: String
  status: String
  content: String
  heroImage: PhotoRelateToOneForUpdateInput
  posts: PostRelateToManyForUpdateInput
  tags: TagRelateToManyForUpdateInput
  isPinned: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input TopicUpdateArgs {
  where: TopicWhereUniqueInput!
  data: TopicUpdateInput!
}

input TopicCreateInput {
  title: String
  status: String
  content: String
  heroImage: PhotoRelateToOneForCreateInput
  posts: PostRelateToManyForCreateInput
  tags: TagRelateToManyForCreateInput
  isPinned: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  role: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  role: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  role: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  role: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  role: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type Video {
  id: ID!
  name: String
  youtubeUrl: String
  file: FileFieldOutput
  coverPhoto: Photo
  description: String
  tags: String
  meta: String
  url: String
  duration: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input VideoWhereUniqueInput {
  id: ID
}

input VideoWhereInput {
  AND: [VideoWhereInput!]
  OR: [VideoWhereInput!]
  NOT: [VideoWhereInput!]
  id: IDFilter
  name: StringFilter
  youtubeUrl: StringFilter
  coverPhoto: PhotoWhereInput
  description: StringFilter
  tags: StringFilter
  meta: StringFilter
  duration: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input VideoOrderByInput {
  id: OrderDirection
  name: OrderDirection
  youtubeUrl: OrderDirection
  description: OrderDirection
  tags: OrderDirection
  meta: OrderDirection
  duration: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input VideoUpdateInput {
  name: String
  youtubeUrl: String
  file: FileFieldInput
  coverPhoto: PhotoRelateToOneForUpdateInput
  description: String
  tags: String
  meta: String
  duration: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input VideoUpdateArgs {
  where: VideoWhereUniqueInput!
  data: VideoUpdateInput!
}

input VideoCreateInput {
  name: String
  youtubeUrl: String
  file: FileFieldInput
  coverPhoto: PhotoRelateToOneForCreateInput
  description: String
  tags: String
  meta: String
  duration: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createAd(data: AdCreateInput!): Ad
  createAds(data: [AdCreateInput!]!): [Ad]
  updateAd(where: AdWhereUniqueInput!, data: AdUpdateInput!): Ad
  updateAds(data: [AdUpdateArgs!]!): [Ad]
  deleteAd(where: AdWhereUniqueInput!): Ad
  deleteAds(where: [AdWhereUniqueInput!]!): [Ad]
  createAttachment(data: AttachmentCreateInput!): Attachment
  createAttachments(data: [AttachmentCreateInput!]!): [Attachment]
  updateAttachment(where: AttachmentWhereUniqueInput!, data: AttachmentUpdateInput!): Attachment
  updateAttachments(data: [AttachmentUpdateArgs!]!): [Attachment]
  deleteAttachment(where: AttachmentWhereUniqueInput!): Attachment
  deleteAttachments(where: [AttachmentWhereUniqueInput!]!): [Attachment]
  createAuthor(data: AuthorCreateInput!): Author
  createAuthors(data: [AuthorCreateInput!]!): [Author]
  updateAuthor(where: AuthorWhereUniqueInput!, data: AuthorUpdateInput!): Author
  updateAuthors(data: [AuthorUpdateArgs!]!): [Author]
  deleteAuthor(where: AuthorWhereUniqueInput!): Author
  deleteAuthors(where: [AuthorWhereUniqueInput!]!): [Author]
  createCategory(data: CategoryCreateInput!): Category
  createCategories(data: [CategoryCreateInput!]!): [Category]
  updateCategory(where: CategoryWhereUniqueInput!, data: CategoryUpdateInput!): Category
  updateCategories(data: [CategoryUpdateArgs!]!): [Category]
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteCategories(where: [CategoryWhereUniqueInput!]!): [Category]
  createClassify(data: ClassifyCreateInput!): Classify
  createClassifies(data: [ClassifyCreateInput!]!): [Classify]
  updateClassify(where: ClassifyWhereUniqueInput!, data: ClassifyUpdateInput!): Classify
  updateClassifies(data: [ClassifyUpdateArgs!]!): [Classify]
  deleteClassify(where: ClassifyWhereUniqueInput!): Classify
  deleteClassifies(where: [ClassifyWhereUniqueInput!]!): [Classify]
  createConfig(data: ConfigCreateInput!): Config
  createConfigs(data: [ConfigCreateInput!]!): [Config]
  updateConfig(where: ConfigWhereUniqueInput!, data: ConfigUpdateInput!): Config
  updateConfigs(data: [ConfigUpdateArgs!]!): [Config]
  deleteConfig(where: ConfigWhereUniqueInput!): Config
  deleteConfigs(where: [ConfigWhereUniqueInput!]!): [Config]
  createDonation(data: DonationCreateInput!): Donation
  createDonations(data: [DonationCreateInput!]!): [Donation]
  updateDonation(where: DonationWhereUniqueInput!, data: DonationUpdateInput!): Donation
  updateDonations(data: [DonationUpdateArgs!]!): [Donation]
  deleteDonation(where: DonationWhereUniqueInput!): Donation
  deleteDonations(where: [DonationWhereUniqueInput!]!): [Donation]
  createDonationPV(data: DonationPVCreateInput!): DonationPV
  createDonationPVS(data: [DonationPVCreateInput!]!): [DonationPV]
  updateDonationPV(where: DonationPVWhereUniqueInput!, data: DonationPVUpdateInput!): DonationPV
  updateDonationPVS(data: [DonationPVUpdateArgs!]!): [DonationPV]
  deleteDonationPV(where: DonationPVWhereUniqueInput!): DonationPV
  deleteDonationPVS(where: [DonationPVWhereUniqueInput!]!): [DonationPV]
  createEvent(data: EventCreateInput!): Event
  createEvents(data: [EventCreateInput!]!): [Event]
  updateEvent(where: EventWhereUniqueInput!, data: EventUpdateInput!): Event
  updateEvents(data: [EventUpdateArgs!]!): [Event]
  deleteEvent(where: EventWhereUniqueInput!): Event
  deleteEvents(where: [EventWhereUniqueInput!]!): [Event]
  createFavorite(data: FavoriteCreateInput!): Favorite
  createFavorites(data: [FavoriteCreateInput!]!): [Favorite]
  updateFavorite(where: FavoriteWhereUniqueInput!, data: FavoriteUpdateInput!): Favorite
  updateFavorites(data: [FavoriteUpdateArgs!]!): [Favorite]
  deleteFavorite(where: FavoriteWhereUniqueInput!): Favorite
  deleteFavorites(where: [FavoriteWhereUniqueInput!]!): [Favorite]
  createHomepagePick(data: HomepagePickCreateInput!): HomepagePick
  createHomepagePicks(data: [HomepagePickCreateInput!]!): [HomepagePick]
  updateHomepagePick(where: HomepagePickWhereUniqueInput!, data: HomepagePickUpdateInput!): HomepagePick
  updateHomepagePicks(data: [HomepagePickUpdateArgs!]!): [HomepagePick]
  deleteHomepagePick(where: HomepagePickWhereUniqueInput!): HomepagePick
  deleteHomepagePicks(where: [HomepagePickWhereUniqueInput!]!): [HomepagePick]
  createInfoGraph(data: InfoGraphCreateInput!): InfoGraph
  createInfoGraphs(data: [InfoGraphCreateInput!]!): [InfoGraph]
  updateInfoGraph(where: InfoGraphWhereUniqueInput!, data: InfoGraphUpdateInput!): InfoGraph
  updateInfoGraphs(data: [InfoGraphUpdateArgs!]!): [InfoGraph]
  deleteInfoGraph(where: InfoGraphWhereUniqueInput!): InfoGraph
  deleteInfoGraphs(where: [InfoGraphWhereUniqueInput!]!): [InfoGraph]
  createJob(data: JobCreateInput!): Job
  createJobs(data: [JobCreateInput!]!): [Job]
  updateJob(where: JobWhereUniqueInput!, data: JobUpdateInput!): Job
  updateJobs(data: [JobUpdateArgs!]!): [Job]
  deleteJob(where: JobWhereUniqueInput!): Job
  deleteJobs(where: [JobWhereUniqueInput!]!): [Job]
  createLocation(data: LocationCreateInput!): Location
  createLocations(data: [LocationCreateInput!]!): [Location]
  updateLocation(where: LocationWhereUniqueInput!, data: LocationUpdateInput!): Location
  updateLocations(data: [LocationUpdateArgs!]!): [Location]
  deleteLocation(where: LocationWhereUniqueInput!): Location
  deleteLocations(where: [LocationWhereUniqueInput!]!): [Location]
  createMember(data: MemberCreateInput!): Member
  createMembers(data: [MemberCreateInput!]!): [Member]
  updateMember(where: MemberWhereUniqueInput!, data: MemberUpdateInput!): Member
  updateMembers(data: [MemberUpdateArgs!]!): [Member]
  deleteMember(where: MemberWhereUniqueInput!): Member
  deleteMembers(where: [MemberWhereUniqueInput!]!): [Member]
  createNewsletter(data: NewsletterCreateInput!): Newsletter
  createNewsletters(data: [NewsletterCreateInput!]!): [Newsletter]
  updateNewsletter(where: NewsletterWhereUniqueInput!, data: NewsletterUpdateInput!): Newsletter
  updateNewsletters(data: [NewsletterUpdateArgs!]!): [Newsletter]
  deleteNewsletter(where: NewsletterWhereUniqueInput!): Newsletter
  deleteNewsletters(where: [NewsletterWhereUniqueInput!]!): [Newsletter]
  createPhoto(data: PhotoCreateInput!): Photo
  createPhotos(data: [PhotoCreateInput!]!): [Photo]
  updatePhoto(where: PhotoWhereUniqueInput!, data: PhotoUpdateInput!): Photo
  updatePhotos(data: [PhotoUpdateArgs!]!): [Photo]
  deletePhoto(where: PhotoWhereUniqueInput!): Photo
  deletePhotos(where: [PhotoWhereUniqueInput!]!): [Photo]
  createPoll(data: PollCreateInput!): Poll
  createPolls(data: [PollCreateInput!]!): [Poll]
  updatePoll(where: PollWhereUniqueInput!, data: PollUpdateInput!): Poll
  updatePolls(data: [PollUpdateArgs!]!): [Poll]
  deletePoll(where: PollWhereUniqueInput!): Poll
  deletePolls(where: [PollWhereUniqueInput!]!): [Poll]
  createPollResult(data: PollResultCreateInput!): PollResult
  createPollResults(data: [PollResultCreateInput!]!): [PollResult]
  updatePollResult(where: PollResultWhereUniqueInput!, data: PollResultUpdateInput!): PollResult
  updatePollResults(data: [PollResultUpdateArgs!]!): [PollResult]
  deletePollResult(where: PollResultWhereUniqueInput!): PollResult
  deletePollResults(where: [PollResultWhereUniqueInput!]!): [PollResult]
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createReadingHistory(data: ReadingHistoryCreateInput!): ReadingHistory
  createReadingHistories(data: [ReadingHistoryCreateInput!]!): [ReadingHistory]
  updateReadingHistory(where: ReadingHistoryWhereUniqueInput!, data: ReadingHistoryUpdateInput!): ReadingHistory
  updateReadingHistories(data: [ReadingHistoryUpdateArgs!]!): [ReadingHistory]
  deleteReadingHistory(where: ReadingHistoryWhereUniqueInput!): ReadingHistory
  deleteReadingHistories(where: [ReadingHistoryWhereUniqueInput!]!): [ReadingHistory]
  createSection(data: SectionCreateInput!): Section
  createSections(data: [SectionCreateInput!]!): [Section]
  updateSection(where: SectionWhereUniqueInput!, data: SectionUpdateInput!): Section
  updateSections(data: [SectionUpdateArgs!]!): [Section]
  deleteSection(where: SectionWhereUniqueInput!): Section
  deleteSections(where: [SectionWhereUniqueInput!]!): [Section]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  createTimeline(data: TimelineCreateInput!): Timeline
  createTimelines(data: [TimelineCreateInput!]!): [Timeline]
  updateTimeline(where: TimelineWhereUniqueInput!, data: TimelineUpdateInput!): Timeline
  updateTimelines(data: [TimelineUpdateArgs!]!): [Timeline]
  deleteTimeline(where: TimelineWhereUniqueInput!): Timeline
  deleteTimelines(where: [TimelineWhereUniqueInput!]!): [Timeline]
  createTimelineItem(data: TimelineItemCreateInput!): TimelineItem
  createTimelineItems(data: [TimelineItemCreateInput!]!): [TimelineItem]
  updateTimelineItem(where: TimelineItemWhereUniqueInput!, data: TimelineItemUpdateInput!): TimelineItem
  updateTimelineItems(data: [TimelineItemUpdateArgs!]!): [TimelineItem]
  deleteTimelineItem(where: TimelineItemWhereUniqueInput!): TimelineItem
  deleteTimelineItems(where: [TimelineItemWhereUniqueInput!]!): [TimelineItem]
  createTopic(data: TopicCreateInput!): Topic
  createTopics(data: [TopicCreateInput!]!): [Topic]
  updateTopic(where: TopicWhereUniqueInput!, data: TopicUpdateInput!): Topic
  updateTopics(data: [TopicUpdateArgs!]!): [Topic]
  deleteTopic(where: TopicWhereUniqueInput!): Topic
  deleteTopics(where: [TopicWhereUniqueInput!]!): [Topic]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createVideo(data: VideoCreateInput!): Video
  createVideos(data: [VideoCreateInput!]!): [Video]
  updateVideo(where: VideoWhereUniqueInput!, data: VideoUpdateInput!): Video
  updateVideos(data: [VideoUpdateArgs!]!): [Video]
  deleteVideo(where: VideoWhereUniqueInput!): Video
  deleteVideos(where: [VideoWhereUniqueInput!]!): [Video]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
  role: String
}

type Query {
  ads(where: AdWhereInput! = {}, orderBy: [AdOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AdWhereUniqueInput): [Ad!]
  ad(where: AdWhereUniqueInput!): Ad
  adsCount(where: AdWhereInput! = {}): Int
  attachments(where: AttachmentWhereInput! = {}, orderBy: [AttachmentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AttachmentWhereUniqueInput): [Attachment!]
  attachment(where: AttachmentWhereUniqueInput!): Attachment
  attachmentsCount(where: AttachmentWhereInput! = {}): Int
  authors(where: AuthorWhereInput! = {}, orderBy: [AuthorOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AuthorWhereUniqueInput): [Author!]
  author(where: AuthorWhereUniqueInput!): Author
  authorsCount(where: AuthorWhereInput! = {}): Int
  categories(where: CategoryWhereInput! = {}, orderBy: [CategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CategoryWhereUniqueInput): [Category!]
  category(where: CategoryWhereUniqueInput!): Category
  categoriesCount(where: CategoryWhereInput! = {}): Int
  classifies(where: ClassifyWhereInput! = {}, orderBy: [ClassifyOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ClassifyWhereUniqueInput): [Classify!]
  classify(where: ClassifyWhereUniqueInput!): Classify
  classifiesCount(where: ClassifyWhereInput! = {}): Int
  configs(where: ConfigWhereInput! = {}, orderBy: [ConfigOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ConfigWhereUniqueInput): [Config!]
  config(where: ConfigWhereUniqueInput!): Config
  configsCount(where: ConfigWhereInput! = {}): Int
  donations(where: DonationWhereInput! = {}, orderBy: [DonationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: DonationWhereUniqueInput): [Donation!]
  donation(where: DonationWhereUniqueInput!): Donation
  donationsCount(where: DonationWhereInput! = {}): Int
  donationPVS(where: DonationPVWhereInput! = {}, orderBy: [DonationPVOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: DonationPVWhereUniqueInput): [DonationPV!]
  donationPV(where: DonationPVWhereUniqueInput!): DonationPV
  donationPVSCount(where: DonationPVWhereInput! = {}): Int
  events(where: EventWhereInput! = {}, orderBy: [EventOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EventWhereUniqueInput): [Event!]
  event(where: EventWhereUniqueInput!): Event
  eventsCount(where: EventWhereInput! = {}): Int
  favorites(where: FavoriteWhereInput! = {}, orderBy: [FavoriteOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FavoriteWhereUniqueInput): [Favorite!]
  favorite(where: FavoriteWhereUniqueInput!): Favorite
  favoritesCount(where: FavoriteWhereInput! = {}): Int
  homepagePicks(where: HomepagePickWhereInput! = {}, orderBy: [HomepagePickOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: HomepagePickWhereUniqueInput): [HomepagePick!]
  homepagePick(where: HomepagePickWhereUniqueInput!): HomepagePick
  homepagePicksCount(where: HomepagePickWhereInput! = {}): Int
  infoGraphs(where: InfoGraphWhereInput! = {}, orderBy: [InfoGraphOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: InfoGraphWhereUniqueInput): [InfoGraph!]
  infoGraph(where: InfoGraphWhereUniqueInput!): InfoGraph
  infoGraphsCount(where: InfoGraphWhereInput! = {}): Int
  jobs(where: JobWhereInput! = {}, orderBy: [JobOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: JobWhereUniqueInput): [Job!]
  job(where: JobWhereUniqueInput!): Job
  jobsCount(where: JobWhereInput! = {}): Int
  locations(where: LocationWhereInput! = {}, orderBy: [LocationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LocationWhereUniqueInput): [Location!]
  location(where: LocationWhereUniqueInput!): Location
  locationsCount(where: LocationWhereInput! = {}): Int
  members(where: MemberWhereInput! = {}, orderBy: [MemberOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MemberWhereUniqueInput): [Member!]
  member(where: MemberWhereUniqueInput!): Member
  membersCount(where: MemberWhereInput! = {}): Int
  newsletters(where: NewsletterWhereInput! = {}, orderBy: [NewsletterOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: NewsletterWhereUniqueInput): [Newsletter!]
  newsletter(where: NewsletterWhereUniqueInput!): Newsletter
  newslettersCount(where: NewsletterWhereInput! = {}): Int
  photos(where: PhotoWhereInput! = {}, orderBy: [PhotoOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PhotoWhereUniqueInput): [Photo!]
  photo(where: PhotoWhereUniqueInput!): Photo
  photosCount(where: PhotoWhereInput! = {}): Int
  polls(where: PollWhereInput! = {}, orderBy: [PollOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PollWhereUniqueInput): [Poll!]
  poll(where: PollWhereUniqueInput!): Poll
  pollsCount(where: PollWhereInput! = {}): Int
  pollResults(where: PollResultWhereInput! = {}, orderBy: [PollResultOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PollResultWhereUniqueInput): [PollResult!]
  pollResult(where: PollResultWhereUniqueInput!): PollResult
  pollResultsCount(where: PollResultWhereInput! = {}): Int
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  post(where: PostWhereUniqueInput!): Post
  postsCount(where: PostWhereInput! = {}): Int
  readingHistories(where: ReadingHistoryWhereInput! = {}, orderBy: [ReadingHistoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ReadingHistoryWhereUniqueInput): [ReadingHistory!]
  readingHistory(where: ReadingHistoryWhereUniqueInput!): ReadingHistory
  readingHistoriesCount(where: ReadingHistoryWhereInput! = {}): Int
  sections(where: SectionWhereInput! = {}, orderBy: [SectionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SectionWhereUniqueInput): [Section!]
  section(where: SectionWhereUniqueInput!): Section
  sectionsCount(where: SectionWhereInput! = {}): Int
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tag(where: TagWhereUniqueInput!): Tag
  tagsCount(where: TagWhereInput! = {}): Int
  timelines(where: TimelineWhereInput! = {}, orderBy: [TimelineOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TimelineWhereUniqueInput): [Timeline!]
  timeline(where: TimelineWhereUniqueInput!): Timeline
  timelinesCount(where: TimelineWhereInput! = {}): Int
  timelineItems(where: TimelineItemWhereInput! = {}, orderBy: [TimelineItemOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TimelineItemWhereUniqueInput): [TimelineItem!]
  timelineItem(where: TimelineItemWhereUniqueInput!): TimelineItem
  timelineItemsCount(where: TimelineItemWhereInput! = {}): Int
  topics(where: TopicWhereInput! = {}, orderBy: [TopicOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TopicWhereUniqueInput): [Topic!]
  topic(where: TopicWhereUniqueInput!): Topic
  topicsCount(where: TopicWhereInput! = {}): Int
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  videos(where: VideoWhereInput! = {}, orderBy: [VideoOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: VideoWhereUniqueInput): [Video!]
  video(where: VideoWhereUniqueInput!): Video
  videosCount(where: VideoWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
