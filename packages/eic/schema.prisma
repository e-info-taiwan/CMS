// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "postgresql"
}

generator client {
  provider = "prisma-client-js"
}

model EditorChoice {
  id          Int       @id @default(autoincrement())
  sortOrder   Int?
  name        String    @default("")
  description String    @default("")
  choices     Post?     @relation("EditorChoice_choices", fields: [choicesId], references: [id])
  choicesId   Int?      @map("choices")
  link        String    @default("")
  heroImage   Photo?    @relation("EditorChoice_heroImage", fields: [heroImageId], references: [id])
  heroImageId Int?      @map("heroImage")
  state       String?   @default("draft")
  createdAt   DateTime?
  updatedAt   DateTime?
  createdBy   User?     @relation("EditorChoice_createdBy", fields: [createdById], references: [id])
  createdById Int?      @map("createdBy")
  updatedBy   User?     @relation("EditorChoice_updatedBy", fields: [updatedById], references: [id])
  updatedById Int?      @map("updatedBy")

  @@index([choicesId])
  @@index([heroImageId])
  @@index([state])
  @@index([createdById])
  @@index([updatedById])
}

model Photo {
  id                             Int            @id @default(autoincrement())
  name                           String         @default("")
  imageFile_filesize             Int?
  imageFile_extension            String?
  imageFile_width                Int?
  imageFile_height               Int?
  imageFile_id                   String?
  file_filesize                  Int?
  file_filename                  String?
  tags                           Tag[]          @relation("Photo_tags")
  urlOriginal                    String         @default("")
  createdAt                      DateTime?
  updatedAt                      DateTime?
  createdBy                      User?          @relation("Photo_createdBy", fields: [createdById], references: [id])
  createdById                    Int?           @map("createdBy")
  updatedBy                      User?          @relation("Photo_updatedBy", fields: [updatedById], references: [id])
  updatedById                    Int?           @map("updatedBy")
  from_EditorChoice_heroImage    EditorChoice[] @relation("EditorChoice_heroImage")
  from_Author_image              Author[]       @relation("Author_image")
  from_PageVariable_relatedImage PageVariable[] @relation("PageVariable_relatedImage")
  from_Video_coverPhoto          Video[]        @relation("Video_coverPhoto")
  from_Tag_ogImage               Tag[]          @relation("Tag_ogImage")
  from_Category_heroImage        Category[]     @relation("Category_heroImage")
  from_Category_ogImage          Category[]     @relation("Category_ogImage")
  from_Post_heroImage            Post[]         @relation("Post_heroImage")
  from_Post_ogImage              Post[]         @relation("Post_ogImage")

  @@index([createdById])
  @@index([updatedById])
  @@map("Image")
}

model Author {
  id                        Int       @id @default(autoincrement())
  name                      String    @default("")
  name_en                   String    @default("")
  title                     String?   @default("journalist")
  title_en                  String?   @default("journalist")
  email                     String?   @unique
  image                     Photo?    @relation("Author_image", fields: [imageId], references: [id])
  imageId                   Int?      @map("image")
  homepage                  String    @default("")
  sort                      Int?
  isMember                  Boolean   @default(false)
  special_number            String    @default("")
  number_desc               String    @default("")
  number_desc_en            String    @default("")
  facebook                  String    @default("")
  twitter                   String    @default("")
  instagram                 String    @default("")
  address                   String    @default("")
  bio                       String    @default("")
  posts                     Post[]    @relation("Author_posts")
  createdAt                 DateTime?
  updatedAt                 DateTime?
  createdBy                 User?     @relation("Author_createdBy", fields: [createdById], references: [id])
  createdById               Int?      @map("createdBy")
  updatedBy                 User?     @relation("Author_updatedBy", fields: [updatedById], references: [id])
  updatedById               Int?      @map("updatedBy")
  from_Post_photographers   Post[]    @relation("Post_photographers")
  from_Post_cameraOperators Post[]    @relation("Post_cameraOperators")
  from_Post_designers       Post[]    @relation("Post_designers")
  from_Post_engineers       Post[]    @relation("Post_engineers")
  from_Post_dataAnalysts    Post[]    @relation("Post_dataAnalysts")

  @@index([name])
  @@index([imageId])
  @@index([instagram])
  @@index([createdById])
  @@index([updatedById])
}

model PageVariable {
  id             Int       @id @default(autoincrement())
  name           String    @default("")
  relatedImage   Photo?    @relation("PageVariable_relatedImage", fields: [relatedImageId], references: [id])
  relatedImageId Int?      @map("relatedImage")
  value          Json?
  page           String?   @default("about")
  url            String    @default("")
  createdAt      DateTime?
  updatedAt      DateTime?
  createdBy      User?     @relation("PageVariable_createdBy", fields: [createdById], references: [id])
  createdById    Int?      @map("createdBy")
  updatedBy      User?     @relation("PageVariable_updatedBy", fields: [updatedById], references: [id])
  updatedById    Int?      @map("updatedBy")

  @@index([relatedImageId])
  @@index([page])
  @@index([createdById])
  @@index([updatedById])
}

model Video {
  id                  Int       @id @default(autoincrement())
  name                String    @default("")
  youtubeUrl          String    @default("")
  file_filesize       Int?
  file_filename       String?
  coverPhoto          Photo?    @relation("Video_coverPhoto", fields: [coverPhotoId], references: [id])
  coverPhotoId        Int?      @map("coverPhoto")
  description         String    @default("")
  tags                String    @default("")
  meta                String    @default("")
  duration            String    @default("")
  createdAt           DateTime?
  updatedAt           DateTime?
  createdBy           User?     @relation("Video_createdBy", fields: [createdById], references: [id])
  createdById         Int?      @map("createdBy")
  updatedBy           User?     @relation("Video_updatedBy", fields: [updatedById], references: [id])
  updatedById         Int?      @map("updatedBy")
  from_Tag_heroVideo  Tag[]     @relation("Tag_heroVideo")
  from_Post_heroVideo Post[]    @relation("Post_heroVideo")

  @@index([coverPhotoId])
  @@index([createdById])
  @@index([updatedById])
}

model AudioFile {
  id            Int       @id @default(autoincrement())
  name          String    @default("")
  file_filesize Int?
  file_filename String?
  description   String    @default("")
  tags          String    @default("")
  meta          String    @default("")
  duration      String    @default("")
  createdAt     DateTime?
  updatedAt     DateTime?
  createdBy     User?     @relation("AudioFile_createdBy", fields: [createdById], references: [id])
  createdById   Int?      @map("createdBy")
  updatedBy     User?     @relation("AudioFile_updatedBy", fields: [updatedById], references: [id])
  updatedById   Int?      @map("updatedBy")

  @@index([createdById])
  @@index([updatedById])
}

model Tag {
  id            Int       @id @default(autoincrement())
  name          String    @unique @default("")
  brief         String    @default("")
  heroVideo     Video?    @relation("Tag_heroVideo", fields: [heroVideoId], references: [id])
  heroVideoId   Int?      @map("heroVideo")
  state         String?   @default("active")
  ogTitle       String    @default("")
  ogDescription String    @default("")
  ogImage       Photo?    @relation("Tag_ogImage", fields: [ogImageId], references: [id])
  ogImageId     Int?      @map("ogImage")
  isFeatured    Boolean   @default(false)
  posts         Post[]    @relation("Post_tags")
  images        Photo[]   @relation("Photo_tags")
  createdAt     DateTime?
  updatedAt     DateTime?
  createdBy     User?     @relation("Tag_createdBy", fields: [createdById], references: [id])
  createdById   Int?      @map("createdBy")
  updatedBy     User?     @relation("Tag_updatedBy", fields: [updatedById], references: [id])
  updatedById   Int?      @map("updatedBy")

  @@index([heroVideoId])
  @@index([ogImageId])
  @@index([createdById])
  @@index([updatedById])
}

model Category {
  id            Int       @id @default(autoincrement())
  slug          String    @unique @default("")
  title         String    @default("")
  isFeatured    Boolean   @default(false)
  state         String?
  style         String?
  heroImage     Photo?    @relation("Category_heroImage", fields: [heroImageId], references: [id])
  heroImageId   Int?      @map("heroImage")
  sortOrder     Int?      @default(1)
  ogTitle       String    @default("")
  ogDescription String    @default("")
  ogImage       Photo?    @relation("Category_ogImage", fields: [ogImageId], references: [id])
  ogImageId     Int?      @map("ogImage")
  css           String    @default("")
  javascript    String    @default("")
  relatedPost   Post[]    @relation("Category_relatedPost")
  createdAt     DateTime?
  updatedAt     DateTime?
  createdBy     User?     @relation("Category_createdBy", fields: [createdById], references: [id])
  createdById   Int?      @map("createdBy")
  updatedBy     User?     @relation("Category_updatedBy", fields: [updatedById], references: [id])
  updatedById   Int?      @map("updatedBy")

  @@index([state])
  @@index([style])
  @@index([heroImageId])
  @@index([ogImageId])
  @@index([createdById])
  @@index([updatedById])
}

model User {
  id                          Int            @id @default(autoincrement())
  name                        String         @default("")
  email                       String         @unique @default("")
  password                    String
  role                        String
  isProtected                 Boolean        @default(false)
  from_EditorChoice_createdBy EditorChoice[] @relation("EditorChoice_createdBy")
  from_EditorChoice_updatedBy EditorChoice[] @relation("EditorChoice_updatedBy")
  from_Photo_createdBy        Photo[]        @relation("Photo_createdBy")
  from_Photo_updatedBy        Photo[]        @relation("Photo_updatedBy")
  from_Author_createdBy       Author[]       @relation("Author_createdBy")
  from_Author_updatedBy       Author[]       @relation("Author_updatedBy")
  from_PageVariable_createdBy PageVariable[] @relation("PageVariable_createdBy")
  from_PageVariable_updatedBy PageVariable[] @relation("PageVariable_updatedBy")
  from_Video_createdBy        Video[]        @relation("Video_createdBy")
  from_Video_updatedBy        Video[]        @relation("Video_updatedBy")
  from_AudioFile_createdBy    AudioFile[]    @relation("AudioFile_createdBy")
  from_AudioFile_updatedBy    AudioFile[]    @relation("AudioFile_updatedBy")
  from_Tag_createdBy          Tag[]          @relation("Tag_createdBy")
  from_Tag_updatedBy          Tag[]          @relation("Tag_updatedBy")
  from_Category_createdBy     Category[]     @relation("Category_createdBy")
  from_Category_updatedBy     Category[]     @relation("Category_updatedBy")
  from_Post_createdBy         Post[]         @relation("Post_createdBy")
  from_Post_updatedBy         Post[]         @relation("Post_updatedBy")
}

model Post {
  id                           Int            @id @default(autoincrement())
  slug                         String         @default("")
  sortOrder                    Int?
  name                         String         @default("")
  subtitle                     String?
  state                        String?        @default("draft")
  publishTime                  DateTime?
  categories                   Category[]     @relation("Category_relatedPost")
  writers                      Author[]       @relation("Author_posts")
  photographers                Author[]       @relation("Post_photographers")
  cameraOperators              Author[]       @relation("Post_cameraOperators")
  designers                    Author[]       @relation("Post_designers")
  engineers                    Author[]       @relation("Post_engineers")
  dataAnalysts                 Author[]       @relation("Post_dataAnalysts")
  otherByline                  String?
  leadingEmbeddedCode          String         @default("")
  heroVideo                    Video?         @relation("Post_heroVideo", fields: [heroVideoId], references: [id])
  heroVideoId                  Int?           @map("heroVideo")
  heroImage                    Photo?         @relation("Post_heroImage", fields: [heroImageId], references: [id])
  heroImageId                  Int?           @map("heroImage")
  heroCaption                  String?
  heroImageSize                String?        @default("normal")
  summary                      Json?
  content                      Json?
  tags                         Tag[]          @relation("Post_tags")
  wordCount                    Int?
  readingTime                  Int?
  relatedPosts                 Post[]         @relation("Post_relatedPosts")
  ogTitle                      String?
  ogDescription                String?
  ogImage                      Photo?         @relation("Post_ogImage", fields: [ogImageId], references: [id])
  ogImageId                    Int?           @map("ogImage")
  isFeatured                   Boolean        @default(false)
  css                          String         @default("")
  summaryApiData               Json?
  apiData                      Json?
  actionlistApiData            Json?
  citationApiData              Json?
  createdAt                    DateTime?
  updatedAt                    DateTime?
  createdBy                    User?          @relation("Post_createdBy", fields: [createdById], references: [id])
  createdById                  Int?           @map("createdBy")
  updatedBy                    User?          @relation("Post_updatedBy", fields: [updatedById], references: [id])
  updatedById                  Int?           @map("updatedBy")
  manualOrderOfWriters         Json?
  manualOrderOfPhotographers   Json?
  manualOrderOfCameraOperators Json?
  manualOrderOfDesigners       Json?
  manualOrderOfEngineers       Json?
  manualOrderOfDataAnalysts    Json?
  manualOrderOfRelatedPosts    Json?
  from_EditorChoice_choices    EditorChoice[] @relation("EditorChoice_choices")
  from_Post_relatedPosts       Post[]         @relation("Post_relatedPosts")

  @@index([state])
  @@index([publishTime])
  @@index([heroVideoId])
  @@index([heroImageId])
  @@index([ogImageId])
  @@index([createdById])
  @@index([updatedById])
}
